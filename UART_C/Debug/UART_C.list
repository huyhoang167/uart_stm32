
UART_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003484  08003484  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800348c  0800348c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000118  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d328  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001df0  00000000  00000000  0002d3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c50  00000000  00000000  0002f198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009a9  00000000  00000000  0002fde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022ad3  00000000  00000000  00030791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e926  00000000  00000000  00053264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cabff  00000000  00000000  00061b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000033f0  00000000  00000000  0012c78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  0012fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003450 	.word	0x08003450

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003450 	.word	0x08003450

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_Z9uart_inith>:
uint8_t uart_chan1_buffer[BUFFER_CHAN1_LENGTH] = {RESET_VALUE};
uint8_t uart_chan2_buffer[BUFFER_CHAN1_LENGTH] = {RESET_VALUE};

UART_HandleTypeDef* uart_obj[NUMBER_CHANNEL];

void uart_init(uint8_t uart_channel){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	switch(uart_channel){
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d002      	beq.n	80004fe <_Z9uart_inith+0x16>
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d007      	beq.n	800050c <_Z9uart_inith+0x24>
			break;
		case CHANNEL_2:
			uart_obj[uart_channel-1] = &huart5;
			break;
	}
}
 80004fc:	e00d      	b.n	800051a <_Z9uart_inith+0x32>
			uart_obj[uart_channel-1] = &huart4;
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	3b01      	subs	r3, #1
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <_Z9uart_inith+0x40>)
 8000504:	4909      	ldr	r1, [pc, #36]	; (800052c <_Z9uart_inith+0x44>)
 8000506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800050a:	e006      	b.n	800051a <_Z9uart_inith+0x32>
			uart_obj[uart_channel-1] = &huart5;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	3b01      	subs	r3, #1
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <_Z9uart_inith+0x40>)
 8000512:	4907      	ldr	r1, [pc, #28]	; (8000530 <_Z9uart_inith+0x48>)
 8000514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000518:	bf00      	nop
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000048 	.word	0x20000048
 800052c:	20000098 	.word	0x20000098
 8000530:	200000dc 	.word	0x200000dc

08000534 <_Z9uart_sendhPhh>:

uint8_t uart_send(uint8_t uart_channel ,uint8_t* data, uint8_t data_length){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
	switch(uart_channel){
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d002      	beq.n	8000550 <_Z9uart_sendhPhh+0x1c>
 800054a:	2b02      	cmp	r3, #2
 800054c:	d00d      	beq.n	800056a <_Z9uart_sendhPhh+0x36>
 800054e:	e019      	b.n	8000584 <_Z9uart_sendhPhh+0x50>
		case CHANNEL_1:
			return UART_TRANSMIT_DATA(uart_obj[uart_channel-1],data,data_length);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <_Z9uart_sendhPhh+0x5c>)
 8000556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	b292      	uxth	r2, r2
 800055e:	6839      	ldr	r1, [r7, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f001 ffe4 	bl	800252e <HAL_UART_Transmit_IT>
 8000566:	4603      	mov	r3, r0
 8000568:	e00d      	b.n	8000586 <_Z9uart_sendhPhh+0x52>
			break;
		case CHANNEL_2:
			return UART_TRANSMIT_DATA(uart_obj[uart_channel-1],data,data_length);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	3b01      	subs	r3, #1
 800056e:	4a08      	ldr	r2, [pc, #32]	; (8000590 <_Z9uart_sendhPhh+0x5c>)
 8000570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	b292      	uxth	r2, r2
 8000578:	6839      	ldr	r1, [r7, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f001 ffd7 	bl	800252e <HAL_UART_Transmit_IT>
 8000580:	4603      	mov	r3, r0
 8000582:	e000      	b.n	8000586 <_Z9uart_sendhPhh+0x52>
			break;

	}
	return CHANNEL_NOT_FOUND;
 8000584:	2303      	movs	r3, #3
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000048 	.word	0x20000048

08000594 <_Z12uart_receiveh>:
uint8_t uart_receive(uint8_t uart_channel){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (data_chan1_received_flag == 1){
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <_Z12uart_receiveh+0x4c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d117      	bne.n	80005d6 <_Z12uart_receiveh+0x42>
		data_chan1_received_flag = 0;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <_Z12uart_receiveh+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <_Z12uart_receiveh+0x50>)
 80005b2:	f000 ffbe 	bl	8001532 <HAL_GPIO_TogglePin>
		switch(uart_channel){
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d002      	beq.n	80005c2 <_Z12uart_receiveh+0x2e>
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d005      	beq.n	80005cc <_Z12uart_receiveh+0x38>
 80005c0:	e009      	b.n	80005d6 <_Z12uart_receiveh+0x42>
			case CHANNEL_1:
				application_uart(uart_channel);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f80f 	bl	80005e8 <_Z16application_uarth>
				break;
 80005ca:	e004      	b.n	80005d6 <_Z12uart_receiveh+0x42>
			case CHANNEL_2:
				application_uart(uart_channel);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f80a 	bl	80005e8 <_Z16application_uarth>
				break;
 80005d4:	bf00      	nop
		}

	}
	return TRANSMIT_SUCCESS;
 80005d6:	2301      	movs	r3, #1
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000002a 	.word	0x2000002a
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <_Z16application_uarth>:
			break;
		}
	}
}

void application_uart(uint8_t uart_channel){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	; 0x30
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	switch(uart_channel){
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d001      	beq.n	80005fc <_Z16application_uarth+0x14>
 80005f8:	2b02      	cmp	r3, #2
			}
			UART_RECEIVED_DATA(uart_obj[uart_channel-1],&chan1_received_data);
			break;
		}
		case CHANNEL_2:
			break;
 80005fa:	e03a      	b.n	8000672 <_Z16application_uarth+0x8a>
			uint8_t buffer[30] = "Ok\n";
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <_Z16application_uarth+0x94>)
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
 8000612:	831a      	strh	r2, [r3, #24]
			uint8_t input_length = (uint8_t)strlen((char*)&uart_chan1_buffer);
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <_Z16application_uarth+0x98>)
 8000616:	f7ff fde1 	bl	80001dc <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			if (strcmp((char *)&uart_chan1_buffer,"Hi") == 0)
 8000620:	4918      	ldr	r1, [pc, #96]	; (8000684 <_Z16application_uarth+0x9c>)
 8000622:	4817      	ldr	r0, [pc, #92]	; (8000680 <_Z16application_uarth+0x98>)
 8000624:	f7ff fdd0 	bl	80001c8 <strcmp>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d106      	bne.n	800063c <_Z16application_uarth+0x54>
				uart_send(CHANNEL_1,buffer,2);
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2202      	movs	r2, #2
 8000634:	4619      	mov	r1, r3
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff ff7c 	bl	8000534 <_Z9uart_sendhPhh>
			for(int i = 0; i < input_length;i++){
 800063c:	2300      	movs	r3, #0
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000640:	e007      	b.n	8000652 <_Z16application_uarth+0x6a>
				uart_chan1_buffer[i] = RESET_VALUE;
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <_Z16application_uarth+0x98>)
 8000644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000646:	4413      	add	r3, r2
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < input_length;i++){
 800064c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064e:	3301      	adds	r3, #1
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf2      	blt.n	8000642 <_Z16application_uarth+0x5a>
			UART_RECEIVED_DATA(uart_obj[uart_channel-1],&chan1_received_data);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	3b01      	subs	r3, #1
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <_Z16application_uarth+0xa0>)
 8000662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000666:	2201      	movs	r2, #1
 8000668:	4908      	ldr	r1, [pc, #32]	; (800068c <_Z16application_uarth+0xa4>)
 800066a:	4618      	mov	r0, r3
 800066c:	f001 ffa4 	bl	80025b8 <HAL_UART_Receive_IT>
			break;
 8000670:	bf00      	nop
	}
}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	; 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	000a6b4f 	.word	0x000a6b4f
 8000680:	20000030 	.word	0x20000030
 8000684:	08003468 	.word	0x08003468
 8000688:	20000048 	.word	0x20000048
 800068c:	2000002c 	.word	0x2000002c

08000690 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a29      	ldr	r2, [pc, #164]	; (8000744 <HAL_UART_RxCpltCallback+0xb4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d123      	bne.n	80006ea <HAL_UART_RxCpltCallback+0x5a>
		if(BUFFER_CHAN1_LENGTH == buffer_chan1_index)
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <HAL_UART_RxCpltCallback+0xb8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b0a      	cmp	r3, #10
 80006a8:	d102      	bne.n	80006b0 <HAL_UART_RxCpltCallback+0x20>
		{
			buffer_chan1_index = RESET_VALUE;
 80006aa:	4b27      	ldr	r3, [pc, #156]	; (8000748 <HAL_UART_RxCpltCallback+0xb8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
		}
		switch(chan1_received_data){
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <HAL_UART_RxCpltCallback+0xbc>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b0d      	cmp	r3, #13
 80006b6:	d106      	bne.n	80006c6 <HAL_UART_RxCpltCallback+0x36>
			case CARRIAGE_ASCII:
			{
				buffer_chan1_index = RESET_VALUE;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <HAL_UART_RxCpltCallback+0xb8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
				data_chan1_received_flag = 1;
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <HAL_UART_RxCpltCallback+0xc0>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
				break;
 80006c4:	e00b      	b.n	80006de <HAL_UART_RxCpltCallback+0x4e>
			}

			default:{
				uart_chan1_buffer[buffer_chan1_index++] = (uint8_t)chan1_received_data;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <HAL_UART_RxCpltCallback+0xb8>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	b2d1      	uxtb	r1, r2
 80006ce:	4a1e      	ldr	r2, [pc, #120]	; (8000748 <HAL_UART_RxCpltCallback+0xb8>)
 80006d0:	7011      	strb	r1, [r2, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <HAL_UART_RxCpltCallback+0xbc>)
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <HAL_UART_RxCpltCallback+0xc4>)
 80006da:	5499      	strb	r1, [r3, r2]
			    break;
 80006dc:	bf00      	nop
			}
		}
		UART_RECEIVED_DATA(huart,&chan1_received_data);
 80006de:	2201      	movs	r2, #1
 80006e0:	491a      	ldr	r1, [pc, #104]	; (800074c <HAL_UART_RxCpltCallback+0xbc>)
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f001 ff68 	bl	80025b8 <HAL_UART_Receive_IT>
				uart_chan2_buffer[buffer_chan2_index++] = (uint8_t)chan2_received_data;
				break;
		}
		UART_RECEIVED_DATA(huart,&chan2_received_data);
	}
}
 80006e8:	e027      	b.n	800073a <HAL_UART_RxCpltCallback+0xaa>
	else if (huart->Instance == UART5){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <HAL_UART_RxCpltCallback+0xc8>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d122      	bne.n	800073a <HAL_UART_RxCpltCallback+0xaa>
		if(BUFFER_CHAN2_LENGTH == buffer_chan2_index)
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <HAL_UART_RxCpltCallback+0xcc>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b0a      	cmp	r3, #10
 80006fa:	d102      	bne.n	8000702 <HAL_UART_RxCpltCallback+0x72>
			buffer_chan2_index = RESET_VALUE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_UART_RxCpltCallback+0xcc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
		switch(chan2_received_data){
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <HAL_UART_RxCpltCallback+0xd0>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b0d      	cmp	r3, #13
 8000708:	d106      	bne.n	8000718 <HAL_UART_RxCpltCallback+0x88>
				buffer_chan2_index = RESET_VALUE;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_UART_RxCpltCallback+0xcc>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
				data_chan2_received_flag = 1;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_UART_RxCpltCallback+0xd4>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
				break;
 8000716:	e00b      	b.n	8000730 <HAL_UART_RxCpltCallback+0xa0>
				uart_chan2_buffer[buffer_chan2_index++] = (uint8_t)chan2_received_data;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_UART_RxCpltCallback+0xcc>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	b2d1      	uxtb	r1, r2
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_UART_RxCpltCallback+0xcc>)
 8000722:	7011      	strb	r1, [r2, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_UART_RxCpltCallback+0xd0>)
 8000728:	7819      	ldrb	r1, [r3, #0]
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_UART_RxCpltCallback+0xd8>)
 800072c:	5499      	strb	r1, [r3, r2]
				break;
 800072e:	bf00      	nop
		UART_RECEIVED_DATA(huart,&chan2_received_data);
 8000730:	2201      	movs	r2, #1
 8000732:	490b      	ldr	r1, [pc, #44]	; (8000760 <HAL_UART_RxCpltCallback+0xd0>)
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f001 ff3f 	bl	80025b8 <HAL_UART_Receive_IT>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40004c00 	.word	0x40004c00
 8000748:	20000028 	.word	0x20000028
 800074c:	2000002c 	.word	0x2000002c
 8000750:	2000002a 	.word	0x2000002a
 8000754:	20000030 	.word	0x20000030
 8000758:	40005000 	.word	0x40005000
 800075c:	20000029 	.word	0x20000029
 8000760:	2000002d 	.word	0x2000002d
 8000764:	2000002b 	.word	0x2000002b
 8000768:	2000003c 	.word	0x2000003c

0800076c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	}
	if (huart->Instance == UART5){

	}

}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000784:	f000 fb0a 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f820 	bl	80007cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 f93e 	bl	8000a0c <_ZL12MX_GPIO_Initv>
  MX_UART4_Init();
 8000790:	f000 f8e0 	bl	8000954 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8000794:	f000 f90c 	bl	80009b0 <_ZL13MX_UART5_Initv>
  MX_TIM2_Init();
 8000798:	f000 f880 	bl	800089c <_ZL12MX_TIM2_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_init(CHANNEL_1);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff fea3 	bl	80004e8 <_Z9uart_inith>
  //uart_callback(CHANNEL_1);
  UART_RECEIVED_DATA(uart_obj[CHANNEL_1-1],&chan1_received_data);
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <main+0x40>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4906      	ldr	r1, [pc, #24]	; (80007c4 <main+0x44>)
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 ff04 	bl	80025b8 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <main+0x48>)
 80007b2:	f001 fb81 	bl	8001eb8 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */



    /* USER CODE BEGIN 3 */
	uart_receive(CHANNEL_1);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff feec 	bl	8000594 <_Z12uart_receiveh>
 80007bc:	e7fb      	b.n	80007b6 <main+0x36>
 80007be:	bf00      	nop
 80007c0:	20000048 	.word	0x20000048
 80007c4:	2000002c 	.word	0x2000002c
 80007c8:	20000050 	.word	0x20000050

080007cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fe0c 	bl	80033f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <_Z18SystemClock_Configv+0xc8>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4a26      	ldr	r2, [pc, #152]	; (8000894 <_Z18SystemClock_Configv+0xc8>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <_Z18SystemClock_Configv+0xc8>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <_Z18SystemClock_Configv+0xcc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a20      	ldr	r2, [pc, #128]	; (8000898 <_Z18SystemClock_Configv+0xcc>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <_Z18SystemClock_Configv+0xcc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000830:	2310      	movs	r3, #16
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000834:	2300      	movs	r3, #0
 8000836:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fe93 	bl	8001568 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8000852:	f000 f92d 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f001 f8f1 	bl	8001a58 <HAL_RCC_ClockConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	bf14      	ite	ne
 800087c:	2301      	movne	r3, #1
 800087e:	2300      	moveq	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8000886:	f000 f913 	bl	8000ab0 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	; 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	463b      	mov	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 80008ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 80008c2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80008c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e0:	481b      	ldr	r0, [pc, #108]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 80008e2:	f001 fa99 	bl	8001e18 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf14      	ite	ne
 80008ec:	2301      	movne	r3, #1
 80008ee:	2300      	moveq	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80008f6:	f000 f8db 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	4619      	mov	r1, r3
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 8000908:	f001 fb46 	bl	8001f98 <HAL_TIM_ConfigClockSource>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 800091c:	f000 f8c8 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <_ZL12MX_TIM2_Initv+0xb4>)
 800092e:	f001 fd35 	bl	800239c <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000942:	f000 f8b5 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000050 	.word	0x20000050

08000954 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_ZL13MX_UART4_Initv+0x58>)
 800095c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <_ZL13MX_UART4_Initv+0x54>)
 800098c:	f001 fd82 	bl	8002494 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf14      	ite	ne
 8000996:	2301      	movne	r3, #1
 8000998:	2300      	moveq	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 80009a0:	f000 f886 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000098 	.word	0x20000098
 80009ac:	40004c00 	.word	0x40004c00

080009b0 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <_ZL13MX_UART5_Initv+0x58>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <_ZL13MX_UART5_Initv+0x54>)
 80009e8:	f001 fd54 	bl	8002494 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80009fc:	f000 f858 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000dc 	.word	0x200000dc
 8000a08:	40005000 	.word	0x40005000

08000a0c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <_ZL12MX_GPIO_Initv+0xa0>)
 8000a7e:	f000 fd3f 	bl	8001500 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : LED_Pin */
	  GPIO_InitStruct.Pin = LED_Pin;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <_ZL12MX_GPIO_Initv+0xa0>)
 8000a9c:	f000 fb94 	bl	80011c8 <HAL_GPIO_Init>
}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d10d      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_TIM_Base_MspInit+0x3c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_TIM_Base_MspInit+0x3c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_TIM_Base_MspInit+0x3c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <HAL_UART_MspInit+0x144>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d134      	bne.n	8000bd8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a47      	ldr	r2, [pc, #284]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000b78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a40      	ldr	r2, [pc, #256]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bb6:	2308      	movs	r3, #8
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4835      	ldr	r0, [pc, #212]	; (8000c98 <HAL_UART_MspInit+0x14c>)
 8000bc2:	f000 fb01 	bl	80011c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2034      	movs	r0, #52	; 0x34
 8000bcc:	f000 fa33 	bl	8001036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000bd0:	2034      	movs	r0, #52	; 0x34
 8000bd2:	f000 fa4c 	bl	800106e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000bd6:	e057      	b.n	8000c88 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==UART5)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <HAL_UART_MspInit+0x150>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d152      	bne.n	8000c88 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a2a      	ldr	r2, [pc, #168]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_UART_MspInit+0x148>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <HAL_UART_MspInit+0x154>)
 8000c54:	f000 fab8 	bl	80011c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <HAL_UART_MspInit+0x158>)
 8000c74:	f000 faa8 	bl	80011c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2035      	movs	r0, #53	; 0x35
 8000c7e:	f000 f9da 	bl	8001036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000c82:	2035      	movs	r0, #53	; 0x35
 8000c84:	f000 f9f3 	bl	800106e <HAL_NVIC_EnableIRQ>
}
 8000c88:	bf00      	nop
 8000c8a:	3730      	adds	r7, #48	; 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40004c00 	.word	0x40004c00
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40005000 	.word	0x40005000
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	40020c00 	.word	0x40020c00

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8a4 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <UART4_IRQHandler+0x10>)
 8000d02:	f001 fc89 	bl	8002618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000098 	.word	0x20000098

08000d10 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <UART5_IRQHandler+0x10>)
 8000d16:	f001 fc7f 	bl	8002618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000dc 	.word	0x200000dc

08000d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <SystemInit+0x20>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <SystemInit+0x20>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d4e:	490e      	ldr	r1, [pc, #56]	; (8000d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d64:	4c0b      	ldr	r4, [pc, #44]	; (8000d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d72:	f7ff ffd7 	bl	8000d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f002 fb47 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7a:	f7ff fd01 	bl	8000780 <main>
  bx  lr    
 8000d7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d8c:	08003494 	.word	0x08003494
  ldr r2, =_sbss
 8000d90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d94:	20000124 	.word	0x20000124

08000d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_Init+0x40>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_Init+0x40>)
 8000db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_Init+0x40>)
 8000dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f000 f92b 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f000 f808 	bl	8000de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd0:	f7ff fe74 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x54>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_InitTick+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f943 	bl	800108a <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f90b 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HAL_InitTick+0x5c>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000120 	.word	0x20000120

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000120 	.word	0x20000120

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff29 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff3e 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff31 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa2 	bl	8000fdc <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff feda 	bl	8000e68 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d008      	beq.n	80010d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e052      	b.n	800117a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0216 	bic.w	r2, r2, #22
 80010e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <HAL_DMA_Abort+0x62>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0208 	bic.w	r2, r2, #8
 8001112:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001124:	e013      	b.n	800114e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001126:	f7ff fe9f 	bl	8000e68 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b05      	cmp	r3, #5
 8001132:	d90c      	bls.n	800114e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2220      	movs	r2, #32
 8001138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e015      	b.n	800117a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e4      	bne.n	8001126 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001160:	223f      	movs	r2, #63	; 0x3f
 8001162:	409a      	lsls	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d004      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e00c      	b.n	80011ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2205      	movs	r2, #5
 80011a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e16b      	b.n	80014bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 815a 	bne.w	80014b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	2b02      	cmp	r3, #2
 8001218:	d130      	bne.n	800127c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80b4 	beq.w	80014b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a5f      	ldr	r2, [pc, #380]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <HAL_GPIO_Init+0x30c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136a:	4a5b      	ldr	r2, [pc, #364]	; (80014d8 <HAL_GPIO_Init+0x310>)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_GPIO_Init+0x314>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02b      	beq.n	80013ee <HAL_GPIO_Init+0x226>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x318>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x222>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <HAL_GPIO_Init+0x31c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x21e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x320>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x21a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x324>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x216>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x328>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x212>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x32c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x20e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x330>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x20a>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e00e      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013d2:	2308      	movs	r3, #8
 80013d4:	e00c      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e00a      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013de:	2304      	movs	r3, #4
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x228>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	; (80014d8 <HAL_GPIO_Init+0x310>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_GPIO_Init+0x334>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_GPIO_Init+0x334>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001486:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_GPIO_Init+0x334>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_GPIO_Init+0x334>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <HAL_GPIO_Init+0x334>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f ae90 	bls.w	80011e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40021400 	.word	0x40021400
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40021c00 	.word	0x40021c00
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	041a      	lsls	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001544:	887a      	ldrh	r2, [r7, #2]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	041a      	lsls	r2, r3, #16
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43d9      	mvns	r1, r3
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	400b      	ands	r3, r1
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	619a      	str	r2, [r3, #24]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e267      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d075      	beq.n	8001672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001586:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b04      	cmp	r3, #4
 8001590:	d00c      	beq.n	80015ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d112      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159e:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015aa:	d10b      	bne.n	80015c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	4b7e      	ldr	r3, [pc, #504]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d05b      	beq.n	8001670 <HAL_RCC_OscConfig+0x108>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d157      	bne.n	8001670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e242      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x74>
 80015ce:	4b76      	ldr	r3, [pc, #472]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a75      	ldr	r2, [pc, #468]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e01d      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015e6:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6f      	ldr	r2, [pc, #444]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b6d      	ldr	r3, [pc, #436]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6c      	ldr	r2, [pc, #432]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0xb0>
 8001600:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a68      	ldr	r2, [pc, #416]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a65      	ldr	r2, [pc, #404]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fc22 	bl	8000e68 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fc1e 	bl	8000e68 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e207      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b5b      	ldr	r3, [pc, #364]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0xc0>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fc0e 	bl	8000e68 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fc0a 	bl	8000e68 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1f3      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001662:	4b51      	ldr	r3, [pc, #324]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0xe8>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d063      	beq.n	8001746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167e:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d11c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001696:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d116      	bne.n	80016d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e1c7      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4937      	ldr	r1, [pc, #220]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	e03a      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x244>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fbc3 	bl	8000e68 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fbbf 	bl	8000e68 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1a8      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4925      	ldr	r1, [pc, #148]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x244>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff fba2 	bl	8000e68 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fb9e 	bl	8000e68 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e187      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d036      	beq.n	80017c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d016      	beq.n	8001788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x248>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fb82 	bl	8000e68 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff fb7e 	bl	8000e68 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e167      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_OscConfig+0x240>)
 800177c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x200>
 8001786:	e01b      	b.n	80017c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_OscConfig+0x248>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fb6b 	bl	8000e68 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	e00e      	b.n	80017b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fb67 	bl	8000e68 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d907      	bls.n	80017b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e150      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	42470000 	.word	0x42470000
 80017b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	4b88      	ldr	r3, [pc, #544]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ea      	bne.n	8001796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8097 	beq.w	80018fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d2:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b7d      	ldr	r3, [pc, #500]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a7c      	ldr	r2, [pc, #496]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b7a      	ldr	r3, [pc, #488]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b77      	ldr	r3, [pc, #476]	; (80019dc <HAL_RCC_OscConfig+0x474>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b74      	ldr	r3, [pc, #464]	; (80019dc <HAL_RCC_OscConfig+0x474>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a73      	ldr	r2, [pc, #460]	; (80019dc <HAL_RCC_OscConfig+0x474>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff fb27 	bl	8000e68 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fb23 	bl	8000e68 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e10c      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4b6a      	ldr	r3, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x474>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x2ea>
 8001844:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a63      	ldr	r2, [pc, #396]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
 8001850:	e01c      	b.n	800188c <HAL_RCC_OscConfig+0x324>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b05      	cmp	r3, #5
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x30c>
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	4a5e      	ldr	r2, [pc, #376]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6713      	str	r3, [r2, #112]	; 0x70
 8001866:	4b5c      	ldr	r3, [pc, #368]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a5b      	ldr	r2, [pc, #364]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0x324>
 8001874:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	6713      	str	r3, [r2, #112]	; 0x70
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001886:	f023 0304 	bic.w	r3, r3, #4
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d015      	beq.n	80018c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff fae8 	bl	8000e68 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fae4 	bl	8000e68 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0cb      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b2:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0ee      	beq.n	800189c <HAL_RCC_OscConfig+0x334>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c0:	f7ff fad2 	bl	8000e68 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff face 	bl	8000e68 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0b5      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018de:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ee      	bne.n	80018c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f0:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a1 	beq.w	8001a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001906:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d05c      	beq.n	80019cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d141      	bne.n	800199e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_RCC_OscConfig+0x478>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff faa2 	bl	8000e68 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff fa9e 	bl	8000e68 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e087      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	019b      	lsls	r3, r3, #6
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	3b01      	subs	r3, #1
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	491b      	ldr	r1, [pc, #108]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_RCC_OscConfig+0x478>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fa77 	bl	8000e68 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff fa73 	bl	8000e68 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e05c      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x416>
 800199c:	e054      	b.n	8001a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_RCC_OscConfig+0x478>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fa60 	bl	8000e68 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff fa5c 	bl	8000e68 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e045      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_RCC_OscConfig+0x470>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x444>
 80019ca:	e03d      	b.n	8001a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e038      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000
 80019e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x4ec>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d028      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d121      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d11a      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d111      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	085b      	lsrs	r3, r3, #1
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d107      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0cc      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d90c      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b65      	ldr	r3, [pc, #404]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0b8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	494d      	ldr	r1, [pc, #308]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d044      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d119      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e07f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e06f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e067      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4934      	ldr	r1, [pc, #208]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff f98e 	bl	8000e68 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f98a 	bl	8000e68 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e04f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d20c      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e032      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d009      	beq.n	8001bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	490a      	ldr	r1, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f8ee 	bl	8000de0 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00
 8001c14:	40023800 	.word	0x40023800
 8001c18:	0800346c 	.word	0x0800346c
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c28:	b090      	sub	sp, #64	; 0x40
 8001c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c30:	2300      	movs	r3, #0
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c3c:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d00d      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	f200 80a1 	bhi.w	8001d90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x34>
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c56:	e09b      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c5c:	e09b      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_GetSysClockFreq+0x188>)
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c62:	e098      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c64:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6e:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d028      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	2200      	movs	r2, #0
 8001c82:	623b      	str	r3, [r7, #32]
 8001c84:	627a      	str	r2, [r7, #36]	; 0x24
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_RCC_GetSysClockFreq+0x188>)
 8001c90:	fb03 f201 	mul.w	r2, r3, r1
 8001c94:	2300      	movs	r3, #0
 8001c96:	fb00 f303 	mul.w	r3, r0, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a43      	ldr	r2, [pc, #268]	; (8001dac <HAL_RCC_GetSysClockFreq+0x188>)
 8001c9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001caa:	4413      	add	r3, r2
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	61fa      	str	r2, [r7, #28]
 8001cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cbe:	f7fe fa95 	bl	80001ec <__aeabi_uldivmod>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cca:	e053      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	617a      	str	r2, [r7, #20]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cde:	f04f 0b00 	mov.w	fp, #0
 8001ce2:	4652      	mov	r2, sl
 8001ce4:	465b      	mov	r3, fp
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	0159      	lsls	r1, r3, #5
 8001cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf4:	0150      	lsls	r0, r2, #5
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	ebb2 080a 	subs.w	r8, r2, sl
 8001cfe:	eb63 090b 	sbc.w	r9, r3, fp
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d16:	ebb2 0408 	subs.w	r4, r2, r8
 8001d1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	00eb      	lsls	r3, r5, #3
 8001d28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2c:	00e2      	lsls	r2, r4, #3
 8001d2e:	4614      	mov	r4, r2
 8001d30:	461d      	mov	r5, r3
 8001d32:	eb14 030a 	adds.w	r3, r4, sl
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	eb45 030b 	adc.w	r3, r5, fp
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	028b      	lsls	r3, r1, #10
 8001d4e:	4621      	mov	r1, r4
 8001d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d54:	4621      	mov	r1, r4
 8001d56:	028a      	lsls	r2, r1, #10
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	60fa      	str	r2, [r7, #12]
 8001d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d68:	f7fe fa40 	bl	80001ec <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3740      	adds	r7, #64	; 0x40
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	017d7840 	.word	0x017d7840

08001db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dcc:	f7ff fff0 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0a9b      	lsrs	r3, r3, #10
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	0800347c 	.word	0x0800347c

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df4:	f7ff ffdc 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0b5b      	lsrs	r3, r3, #13
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	0800347c 	.word	0x0800347c

08001e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e041      	b.n	8001eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fe64 	bl	8000b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f000 f966 	bl	8002128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e04e      	b.n	8001f6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <HAL_TIM_Base_Start_IT+0xc4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d022      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efa:	d01d      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d018      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00e      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x80>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d010      	beq.n	8001f6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5a:	e007      	b.n	8001f6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00
 8001f8c:	40010400 	.word	0x40010400
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40001800 	.word	0x40001800

08001f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e0b4      	b.n	800211e <HAL_TIM_ConfigClockSource+0x186>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fec:	d03e      	beq.n	800206c <HAL_TIM_ConfigClockSource+0xd4>
 8001fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff2:	f200 8087 	bhi.w	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8001ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffa:	f000 8086 	beq.w	800210a <HAL_TIM_ConfigClockSource+0x172>
 8001ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002002:	d87f      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8002004:	2b70      	cmp	r3, #112	; 0x70
 8002006:	d01a      	beq.n	800203e <HAL_TIM_ConfigClockSource+0xa6>
 8002008:	2b70      	cmp	r3, #112	; 0x70
 800200a:	d87b      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 800200c:	2b60      	cmp	r3, #96	; 0x60
 800200e:	d050      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002010:	2b60      	cmp	r3, #96	; 0x60
 8002012:	d877      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8002014:	2b50      	cmp	r3, #80	; 0x50
 8002016:	d03c      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0xfa>
 8002018:	2b50      	cmp	r3, #80	; 0x50
 800201a:	d873      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 800201c:	2b40      	cmp	r3, #64	; 0x40
 800201e:	d058      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d86f      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8002024:	2b30      	cmp	r3, #48	; 0x30
 8002026:	d064      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002028:	2b30      	cmp	r3, #48	; 0x30
 800202a:	d86b      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 800202c:	2b20      	cmp	r3, #32
 800202e:	d060      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002030:	2b20      	cmp	r3, #32
 8002032:	d867      	bhi.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05c      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002038:	2b10      	cmp	r3, #16
 800203a:	d05a      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x15a>
 800203c:	e062      	b.n	8002104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6899      	ldr	r1, [r3, #8]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f000 f985 	bl	800235c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	609a      	str	r2, [r3, #8]
      break;
 800206a:	e04f      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6899      	ldr	r1, [r3, #8]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f000 f96e 	bl	800235c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800208e:	609a      	str	r2, [r3, #8]
      break;
 8002090:	e03c      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	461a      	mov	r2, r3
 80020a0:	f000 f8e2 	bl	8002268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2150      	movs	r1, #80	; 0x50
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f93b 	bl	8002326 <TIM_ITRx_SetConfig>
      break;
 80020b0:	e02c      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	f000 f901 	bl	80022c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2160      	movs	r1, #96	; 0x60
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f92b 	bl	8002326 <TIM_ITRx_SetConfig>
      break;
 80020d0:	e01c      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	f000 f8c2 	bl	8002268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2140      	movs	r1, #64	; 0x40
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f91b 	bl	8002326 <TIM_ITRx_SetConfig>
      break;
 80020f0:	e00c      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f000 f912 	bl	8002326 <TIM_ITRx_SetConfig>
      break;
 8002102:	e003      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      break;
 8002108:	e000      	b.n	800210c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800210a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <TIM_Base_SetConfig+0x114>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d00f      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <TIM_Base_SetConfig+0x118>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00b      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3c      	ldr	r2, [pc, #240]	; (8002244 <TIM_Base_SetConfig+0x11c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <TIM_Base_SetConfig+0x120>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a3a      	ldr	r2, [pc, #232]	; (800224c <TIM_Base_SetConfig+0x124>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d108      	bne.n	800217a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2f      	ldr	r2, [pc, #188]	; (800223c <TIM_Base_SetConfig+0x114>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d027      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <TIM_Base_SetConfig+0x118>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d023      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <TIM_Base_SetConfig+0x11c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <TIM_Base_SetConfig+0x120>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <TIM_Base_SetConfig+0x124>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d017      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a28      	ldr	r2, [pc, #160]	; (8002250 <TIM_Base_SetConfig+0x128>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a27      	ldr	r2, [pc, #156]	; (8002254 <TIM_Base_SetConfig+0x12c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00f      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a26      	ldr	r2, [pc, #152]	; (8002258 <TIM_Base_SetConfig+0x130>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <TIM_Base_SetConfig+0x134>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a24      	ldr	r2, [pc, #144]	; (8002260 <TIM_Base_SetConfig+0x138>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d003      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <TIM_Base_SetConfig+0x13c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d108      	bne.n	80021ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <TIM_Base_SetConfig+0x114>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d003      	beq.n	8002220 <TIM_Base_SetConfig+0xf8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0c      	ldr	r2, [pc, #48]	; (800224c <TIM_Base_SetConfig+0x124>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d103      	bne.n	8002228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	615a      	str	r2, [r3, #20]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40010000 	.word	0x40010000
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800
 8002248:	40000c00 	.word	0x40000c00
 800224c:	40010400 	.word	0x40010400
 8002250:	40014000 	.word	0x40014000
 8002254:	40014400 	.word	0x40014400
 8002258:	40014800 	.word	0x40014800
 800225c:	40001800 	.word	0x40001800
 8002260:	40001c00 	.word	0x40001c00
 8002264:	40002000 	.word	0x40002000

08002268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f023 0201 	bic.w	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f023 030a 	bic.w	r3, r3, #10
 80022a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	621a      	str	r2, [r3, #32]
}
 80022ba:	bf00      	nop
 80022bc:	371c      	adds	r7, #28
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b087      	sub	sp, #28
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f023 0210 	bic.w	r2, r3, #16
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	031b      	lsls	r3, r3, #12
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	621a      	str	r2, [r3, #32]
}
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	f043 0307 	orr.w	r3, r3, #7
 8002348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	609a      	str	r2, [r3, #8]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	021a      	lsls	r2, r3, #8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	431a      	orrs	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	609a      	str	r2, [r3, #8]
}
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e05a      	b.n	800246a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a21      	ldr	r2, [pc, #132]	; (8002478 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d022      	beq.n	800243e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d01d      	beq.n	800243e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d018      	beq.n	800243e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00e      	beq.n	800243e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d009      	beq.n	800243e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d004      	beq.n	800243e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10c      	bne.n	8002458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4313      	orrs	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40010000 	.word	0x40010000
 800247c:	40000400 	.word	0x40000400
 8002480:	40000800 	.word	0x40000800
 8002484:	40000c00 	.word	0x40000c00
 8002488:	40010400 	.word	0x40010400
 800248c:	40014000 	.word	0x40014000
 8002490:	40001800 	.word	0x40001800

08002494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e03f      	b.n	8002526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fb46 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fd19 	bl	8002f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800250c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	d130      	bne.n	80025aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_UART_Transmit_IT+0x26>
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e029      	b.n	80025ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_UART_Transmit_IT+0x38>
 8002562:	2302      	movs	r3, #2
 8002564:	e022      	b.n	80025ac <HAL_UART_Transmit_IT+0x7e>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2221      	movs	r2, #33	; 0x21
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e000      	b.n	80025ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d11d      	bne.n	800260e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_UART_Receive_IT+0x26>
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e016      	b.n	8002610 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_UART_Receive_IT+0x38>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e00f      	b.n	8002610 <HAL_UART_Receive_IT+0x58>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	461a      	mov	r2, r3
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 faab 	bl	8002b60 <UART_Start_Receive_IT>
 800260a:	4603      	mov	r3, r0
 800260c:	e000      	b.n	8002610 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0ba      	sub	sp, #232	; 0xe8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_UART_IRQHandler+0x66>
 800266a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fb8f 	bl	8002d9a <UART_Receive_IT>
      return;
 800267c:	e256      	b.n	8002b2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800267e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80de 	beq.w	8002844 <HAL_UART_IRQHandler+0x22c>
 8002688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002698:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80d1 	beq.w	8002844 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_UART_IRQHandler+0xae>
 80026ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_UART_IRQHandler+0xd2>
 80026d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_UART_IRQHandler+0xf6>
 80026f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f043 0204 	orr.w	r2, r3, #4
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d011      	beq.n	800273e <HAL_UART_IRQHandler+0x126>
 800271a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0208 	orr.w	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 81ed 	beq.w	8002b22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_UART_IRQHandler+0x14e>
 8002754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fb1a 	bl	8002d9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_UART_IRQHandler+0x17a>
 800278a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d04f      	beq.n	8002832 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa22 	bl	8002bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d141      	bne.n	800282a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3314      	adds	r3, #20
 80027ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3314      	adds	r3, #20
 80027ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1d9      	bne.n	80027a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d013      	beq.n	8002822 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	4a7d      	ldr	r2, [pc, #500]	; (80029f4 <HAL_UART_IRQHandler+0x3dc>)
 8002800:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fcbb 	bl	8001182 <HAL_DMA_Abort_IT>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800281c:	4610      	mov	r0, r2
 800281e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002820:	e00e      	b.n	8002840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f986 	bl	8002b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002828:	e00a      	b.n	8002840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f982 	bl	8002b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002830:	e006      	b.n	8002840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f97e 	bl	8002b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800283e:	e170      	b.n	8002b22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	bf00      	nop
    return;
 8002842:	e16e      	b.n	8002b22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 814a 	bne.w	8002ae2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8143 	beq.w	8002ae2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800285c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 813c 	beq.w	8002ae2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	f040 80b4 	bne.w	80029f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800289c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8140 	beq.w	8002b26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ae:	429a      	cmp	r2, r3
 80028b0:	f080 8139 	bcs.w	8002b26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c6:	f000 8088 	beq.w	80029da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002902:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800290e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1d9      	bne.n	80028ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002920:	e853 3f00 	ldrex	r3, [r3]
 8002924:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3314      	adds	r3, #20
 8002936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800293a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800293e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800294c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e1      	bne.n	8002916 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3314      	adds	r3, #20
 8002958:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800295c:	e853 3f00 	ldrex	r3, [r3]
 8002960:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3314      	adds	r3, #20
 8002972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002978:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800297c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e3      	bne.n	8002952 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a2:	e853 3f00 	ldrex	r3, [r3]
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029aa:	f023 0310 	bic.w	r3, r3, #16
 80029ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	330c      	adds	r3, #12
 80029b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80029be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029c4:	e841 2300 	strex	r3, r2, [r1]
 80029c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e3      	bne.n	8002998 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fb64 	bl	80010a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f8ac 	bl	8002b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029f0:	e099      	b.n	8002b26 <HAL_UART_IRQHandler+0x50e>
 80029f2:	bf00      	nop
 80029f4:	08002ca3 	.word	0x08002ca3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 808b 	beq.w	8002b2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8086 	beq.w	8002b2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	e853 3f00 	ldrex	r3, [r3]
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a42:	647a      	str	r2, [r7, #68]	; 0x44
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a4a:	e841 2300 	strex	r3, r2, [r1]
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1e3      	bne.n	8002a1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	623b      	str	r3, [r7, #32]
   return(result);
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3314      	adds	r3, #20
 8002a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a82:	e841 2300 	strex	r3, r2, [r1]
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e3      	bne.n	8002a56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0310 	bic.w	r3, r3, #16
 8002ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
 8002abc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ac0:	61fa      	str	r2, [r7, #28]
 8002ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	69b9      	ldr	r1, [r7, #24]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e3      	bne.n	8002a9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ad4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f834 	bl	8002b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ae0:	e023      	b.n	8002b2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_UART_IRQHandler+0x4ea>
 8002aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8e5 	bl	8002cca <UART_Transmit_IT>
    return;
 8002b00:	e014      	b.n	8002b2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00e      	beq.n	8002b2c <HAL_UART_IRQHandler+0x514>
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f925 	bl	8002d6a <UART_EndTransmit_IT>
    return;
 8002b20:	e004      	b.n	8002b2c <HAL_UART_IRQHandler+0x514>
    return;
 8002b22:	bf00      	nop
 8002b24:	e002      	b.n	8002b2c <HAL_UART_IRQHandler+0x514>
      return;
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <HAL_UART_IRQHandler+0x514>
      return;
 8002b2a:	bf00      	nop
  }
}
 8002b2c:	37e8      	adds	r7, #232	; 0xe8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop

08002b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2222      	movs	r2, #34	; 0x22
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0220 	orr.w	r2, r2, #32
 8002bcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b095      	sub	sp, #84	; 0x54
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c04:	643a      	str	r2, [r7, #64]	; 0x40
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e5      	bne.n	8002be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3314      	adds	r3, #20
 8002c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3314      	adds	r3, #20
 8002c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e5      	bne.n	8002c18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d119      	bne.n	8002c88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	e853 3f00 	ldrex	r3, [r3]
 8002c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f023 0310 	bic.w	r3, r3, #16
 8002c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c74:	61ba      	str	r2, [r7, #24]
 8002c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	613b      	str	r3, [r7, #16]
   return(result);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e5      	bne.n	8002c54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c96:	bf00      	nop
 8002c98:	3754      	adds	r7, #84	; 0x54
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff ff39 	bl	8002b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b21      	cmp	r3, #33	; 0x21
 8002cdc:	d13e      	bne.n	8002d5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce6:	d114      	bne.n	8002d12 <UART_Transmit_IT+0x48>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d110      	bne.n	8002d12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	621a      	str	r2, [r3, #32]
 8002d10:	e008      	b.n	8002d24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	1c59      	adds	r1, r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6211      	str	r1, [r2, #32]
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4619      	mov	r1, r3
 8002d32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10f      	bne.n	8002d58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fcee 	bl	800076c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08c      	sub	sp, #48	; 0x30
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b22      	cmp	r3, #34	; 0x22
 8002dac:	f040 80ab 	bne.w	8002f06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d117      	bne.n	8002dea <UART_Receive_IT+0x50>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d113      	bne.n	8002dea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	1c9a      	adds	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
 8002de8:	e026      	b.n	8002e38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfc:	d007      	beq.n	8002e0e <UART_Receive_IT+0x74>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <UART_Receive_IT+0x82>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e008      	b.n	8002e2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4619      	mov	r1, r3
 8002e46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d15a      	bne.n	8002f02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0220 	bic.w	r2, r2, #32
 8002e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d135      	bne.n	8002ef8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f023 0310 	bic.w	r3, r3, #16
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb2:	623a      	str	r2, [r7, #32]
 8002eb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	69f9      	ldr	r1, [r7, #28]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e5      	bne.n	8002e92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d10a      	bne.n	8002eea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fe29 	bl	8002b48 <HAL_UARTEx_RxEventCallback>
 8002ef6:	e002      	b.n	8002efe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fd fbc9 	bl	8000690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e002      	b.n	8002f08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3730      	adds	r7, #48	; 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f14:	b0c0      	sub	sp, #256	; 0x100
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	68d9      	ldr	r1, [r3, #12]
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	ea40 0301 	orr.w	r3, r0, r1
 8002f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f68:	f021 010c 	bic.w	r1, r1, #12
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f76:	430b      	orrs	r3, r1
 8002f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8a:	6999      	ldr	r1, [r3, #24]
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	ea40 0301 	orr.w	r3, r0, r1
 8002f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <UART_SetConfig+0x2cc>)
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d005      	beq.n	8002fb0 <UART_SetConfig+0xa0>
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4b8d      	ldr	r3, [pc, #564]	; (80031e0 <UART_SetConfig+0x2d0>)
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d104      	bne.n	8002fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb0:	f7fe ff1e 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8002fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fb8:	e003      	b.n	8002fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fba:	f7fe ff05 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8002fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fcc:	f040 810c 	bne.w	80031e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	1891      	adds	r1, r2, r2
 8002fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fea:	415b      	adcs	r3, r3
 8002fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	eb12 0801 	adds.w	r8, r2, r1
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	eb43 0901 	adc.w	r9, r3, r1
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800300a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800300e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	4623      	mov	r3, r4
 8003018:	eb18 0303 	adds.w	r3, r8, r3
 800301c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003020:	462b      	mov	r3, r5
 8003022:	eb49 0303 	adc.w	r3, r9, r3
 8003026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800303a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800303e:	460b      	mov	r3, r1
 8003040:	18db      	adds	r3, r3, r3
 8003042:	653b      	str	r3, [r7, #80]	; 0x50
 8003044:	4613      	mov	r3, r2
 8003046:	eb42 0303 	adc.w	r3, r2, r3
 800304a:	657b      	str	r3, [r7, #84]	; 0x54
 800304c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003054:	f7fd f8ca 	bl	80001ec <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <UART_SetConfig+0x2d4>)
 800305e:	fba3 2302 	umull	r2, r3, r3, r2
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	011c      	lsls	r4, r3, #4
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	1891      	adds	r1, r2, r2
 800307e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003080:	415b      	adcs	r3, r3
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003088:	4641      	mov	r1, r8
 800308a:	eb12 0a01 	adds.w	sl, r2, r1
 800308e:	4649      	mov	r1, r9
 8003090:	eb43 0b01 	adc.w	fp, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a8:	4692      	mov	sl, r2
 80030aa:	469b      	mov	fp, r3
 80030ac:	4643      	mov	r3, r8
 80030ae:	eb1a 0303 	adds.w	r3, sl, r3
 80030b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb4b 0303 	adc.w	r3, fp, r3
 80030bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030d4:	460b      	mov	r3, r1
 80030d6:	18db      	adds	r3, r3, r3
 80030d8:	643b      	str	r3, [r7, #64]	; 0x40
 80030da:	4613      	mov	r3, r2
 80030dc:	eb42 0303 	adc.w	r3, r2, r3
 80030e0:	647b      	str	r3, [r7, #68]	; 0x44
 80030e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030ea:	f7fd f87f 	bl	80001ec <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <UART_SetConfig+0x2d4>)
 80030f6:	fba3 2301 	umull	r2, r3, r3, r1
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2264      	movs	r2, #100	; 0x64
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	1acb      	subs	r3, r1, r3
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800310a:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <UART_SetConfig+0x2d4>)
 800310c:	fba3 2302 	umull	r2, r3, r3, r2
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003118:	441c      	add	r4, r3
 800311a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	1891      	adds	r1, r2, r2
 8003132:	63b9      	str	r1, [r7, #56]	; 0x38
 8003134:	415b      	adcs	r3, r3
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800313c:	4641      	mov	r1, r8
 800313e:	1851      	adds	r1, r2, r1
 8003140:	6339      	str	r1, [r7, #48]	; 0x30
 8003142:	4649      	mov	r1, r9
 8003144:	414b      	adcs	r3, r1
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003154:	4659      	mov	r1, fp
 8003156:	00cb      	lsls	r3, r1, #3
 8003158:	4651      	mov	r1, sl
 800315a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315e:	4651      	mov	r1, sl
 8003160:	00ca      	lsls	r2, r1, #3
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	4603      	mov	r3, r0
 8003168:	4642      	mov	r2, r8
 800316a:	189b      	adds	r3, r3, r2
 800316c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003170:	464b      	mov	r3, r9
 8003172:	460a      	mov	r2, r1
 8003174:	eb42 0303 	adc.w	r3, r2, r3
 8003178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800318c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003190:	460b      	mov	r3, r1
 8003192:	18db      	adds	r3, r3, r3
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
 8003196:	4613      	mov	r3, r2
 8003198:	eb42 0303 	adc.w	r3, r2, r3
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031a6:	f7fd f821 	bl	80001ec <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <UART_SetConfig+0x2d4>)
 80031b0:	fba3 1302 	umull	r1, r3, r3, r2
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	2164      	movs	r1, #100	; 0x64
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	3332      	adds	r3, #50	; 0x32
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <UART_SetConfig+0x2d4>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	f003 0207 	and.w	r2, r3, #7
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4422      	add	r2, r4
 80031d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031d8:	e106      	b.n	80033e8 <UART_SetConfig+0x4d8>
 80031da:	bf00      	nop
 80031dc:	40011000 	.word	0x40011000
 80031e0:	40011400 	.word	0x40011400
 80031e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031fa:	4642      	mov	r2, r8
 80031fc:	464b      	mov	r3, r9
 80031fe:	1891      	adds	r1, r2, r2
 8003200:	6239      	str	r1, [r7, #32]
 8003202:	415b      	adcs	r3, r3
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
 8003206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800320a:	4641      	mov	r1, r8
 800320c:	1854      	adds	r4, r2, r1
 800320e:	4649      	mov	r1, r9
 8003210:	eb43 0501 	adc.w	r5, r3, r1
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	00eb      	lsls	r3, r5, #3
 800321e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003222:	00e2      	lsls	r2, r4, #3
 8003224:	4614      	mov	r4, r2
 8003226:	461d      	mov	r5, r3
 8003228:	4643      	mov	r3, r8
 800322a:	18e3      	adds	r3, r4, r3
 800322c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003230:	464b      	mov	r3, r9
 8003232:	eb45 0303 	adc.w	r3, r5, r3
 8003236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003256:	4629      	mov	r1, r5
 8003258:	008b      	lsls	r3, r1, #2
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003260:	4621      	mov	r1, r4
 8003262:	008a      	lsls	r2, r1, #2
 8003264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003268:	f7fc ffc0 	bl	80001ec <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4b60      	ldr	r3, [pc, #384]	; (80033f4 <UART_SetConfig+0x4e4>)
 8003272:	fba3 2302 	umull	r2, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	011c      	lsls	r4, r3, #4
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	1891      	adds	r1, r2, r2
 8003292:	61b9      	str	r1, [r7, #24]
 8003294:	415b      	adcs	r3, r3
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800329c:	4641      	mov	r1, r8
 800329e:	1851      	adds	r1, r2, r1
 80032a0:	6139      	str	r1, [r7, #16]
 80032a2:	4649      	mov	r1, r9
 80032a4:	414b      	adcs	r3, r1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b4:	4659      	mov	r1, fp
 80032b6:	00cb      	lsls	r3, r1, #3
 80032b8:	4651      	mov	r1, sl
 80032ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032be:	4651      	mov	r1, sl
 80032c0:	00ca      	lsls	r2, r1, #3
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	4642      	mov	r2, r8
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032d0:	464b      	mov	r3, r9
 80032d2:	460a      	mov	r2, r1
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80032e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032f4:	4649      	mov	r1, r9
 80032f6:	008b      	lsls	r3, r1, #2
 80032f8:	4641      	mov	r1, r8
 80032fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fe:	4641      	mov	r1, r8
 8003300:	008a      	lsls	r2, r1, #2
 8003302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003306:	f7fc ff71 	bl	80001ec <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4611      	mov	r1, r2
 8003310:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <UART_SetConfig+0x4e4>)
 8003312:	fba3 2301 	umull	r2, r3, r3, r1
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2264      	movs	r2, #100	; 0x64
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	1acb      	subs	r3, r1, r3
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	3332      	adds	r3, #50	; 0x32
 8003324:	4a33      	ldr	r2, [pc, #204]	; (80033f4 <UART_SetConfig+0x4e4>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003330:	441c      	add	r4, r3
 8003332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003336:	2200      	movs	r2, #0
 8003338:	673b      	str	r3, [r7, #112]	; 0x70
 800333a:	677a      	str	r2, [r7, #116]	; 0x74
 800333c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	1891      	adds	r1, r2, r2
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	415b      	adcs	r3, r3
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003350:	4641      	mov	r1, r8
 8003352:	1851      	adds	r1, r2, r1
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	4649      	mov	r1, r9
 8003358:	414b      	adcs	r3, r1
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003368:	4659      	mov	r1, fp
 800336a:	00cb      	lsls	r3, r1, #3
 800336c:	4651      	mov	r1, sl
 800336e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003372:	4651      	mov	r1, sl
 8003374:	00ca      	lsls	r2, r1, #3
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	4603      	mov	r3, r0
 800337c:	4642      	mov	r2, r8
 800337e:	189b      	adds	r3, r3, r2
 8003380:	66bb      	str	r3, [r7, #104]	; 0x68
 8003382:	464b      	mov	r3, r9
 8003384:	460a      	mov	r2, r1
 8003386:	eb42 0303 	adc.w	r3, r2, r3
 800338a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
 8003396:	667a      	str	r2, [r7, #100]	; 0x64
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033a4:	4649      	mov	r1, r9
 80033a6:	008b      	lsls	r3, r1, #2
 80033a8:	4641      	mov	r1, r8
 80033aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ae:	4641      	mov	r1, r8
 80033b0:	008a      	lsls	r2, r1, #2
 80033b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033b6:	f7fc ff19 	bl	80001ec <__aeabi_uldivmod>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <UART_SetConfig+0x4e4>)
 80033c0:	fba3 1302 	umull	r1, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	2164      	movs	r1, #100	; 0x64
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	3332      	adds	r3, #50	; 0x32
 80033d2:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <UART_SetConfig+0x4e4>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4422      	add	r2, r4
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033ee:	46bd      	mov	sp, r7
 80033f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f4:	51eb851f 	.word	0x51eb851f

080033f8 <memset>:
 80033f8:	4402      	add	r2, r0
 80033fa:	4603      	mov	r3, r0
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d100      	bne.n	8003402 <memset+0xa>
 8003400:	4770      	bx	lr
 8003402:	f803 1b01 	strb.w	r1, [r3], #1
 8003406:	e7f9      	b.n	80033fc <memset+0x4>

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4d0d      	ldr	r5, [pc, #52]	; (8003440 <__libc_init_array+0x38>)
 800340c:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	2600      	movs	r6, #0
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	4d0b      	ldr	r5, [pc, #44]	; (8003448 <__libc_init_array+0x40>)
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <__libc_init_array+0x44>)
 800341c:	f000 f818 	bl	8003450 <_init>
 8003420:	1b64      	subs	r4, r4, r5
 8003422:	10a4      	asrs	r4, r4, #2
 8003424:	2600      	movs	r6, #0
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f855 3b04 	ldr.w	r3, [r5], #4
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	0800348c 	.word	0x0800348c
 8003444:	0800348c 	.word	0x0800348c
 8003448:	0800348c 	.word	0x0800348c
 800344c:	08003490 	.word	0x08003490

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr
