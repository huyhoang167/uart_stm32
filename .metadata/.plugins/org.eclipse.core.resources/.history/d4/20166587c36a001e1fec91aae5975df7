/*
 * uart_services.c
 *
 *  Created on: Oct 13, 2023
 *      Author: hoang
 */

#include "uart_services.h"

#define BUFFER_CHAN1_LENGTH 10
#define BUFFER_CHAN1_LENGTH 10

static volatile uint8_t buffer_chan1_index = RESET_VALUE;
static volatile uint8_t buffer_chan2_index = RESET_VALUE;

static volatile uint8_t data_chan1_received_flag = false;
static volatile uint8_t data_chan2_received_flag = false;

uint8_t chan1_received_data;
uint8_t chan2_received_data;

static uint8_t uart_chan1_buffer[BUFFER_CHAN1_LENGTH] = {RESET_VALUE};
static uint8_t uart_chan2_buffer[BUFFER_CHAN1_LENGTH] = {RESET_VALUE};

#define UART_CHAN1_INIT()	MX_UART4_Init();
#define UART_CHAN2_INIT()	MX_UART5_Init();

#define UART_CHAN1_RECEIVED_DATA 	HAL_UART_Receive_IT(&huart4,&chan1_received_data,1)
#define UART_CHAN1_RECEIVED_DATA 	HAL_UART_Receive_IT(&huart5,&chan2_received_data,1)

#define UART_Rx_CALLBACK   	HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)


void uart_init(uint8_t uart_channel){
	switch(uart_channel){
		case 1:
			UART_CHAN1_INIT();
			break;
		case 2:
			UART_CHAN2_INIT();
			break;
		default:
			break;
	}
}

uint8_t uart_deinit(uint8_t uart_channel);

uint8_t uart_send(uint8_t uart_channel,uint8_t* data){
	HAL_UART_Transmit(huart, pData, Size, Timeout)
}
uint8_t uart_receive(uint8_t uart_channel, uint8_t* buffer);
void 	uart_callback_function(UART_HandleTypeDef *huart, uint8_t uart_channel){
	if (uart_channel){
		case 1:

	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance == UART4){
		if(BUFFER_CHAN1_LENGTH == buffer_chan1_index)
		{
			buffer_chan1_index = RESET_VALUE;
		}
		switch(chan1_received_data){
			case CARRIAGE_ASCII:
				buffer_chan1_index = RESET_VALUE;
				data_chan1_received_flag = true;
				break;
			default:
				uart_chan1_buffer[buffer_chan1_index++] = (uint8_t)chan2_received_data;
				break;
		}
		UART_CHAN1_RECEIVED_DATA;
	}
	else if (huart->Instance == UART5){
		if(BUFFER_CHAN2_LENGTH == buffer_chan2_index)
		{
			buffer_chan2_index = RESET_VALUE;
		}
		switch(chan2_received_data){
			case CARRIAGE_ASCII:
				buffer_chan2_index = RESET_VALUE;
				data_chan2_received_flag = true;
				break;
			default:
				uart_chan2_buffer[buffer_chan2_index++] = (uint8_t)chan2_received_data;
				break;
		}
		UART_CHAN2_RECEIVED_DATA;
	}
}
