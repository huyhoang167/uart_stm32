
UART_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033b8  080033b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033c0  080033c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000110  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000011c  2000011c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d247  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d7b  00000000  00000000  0002d2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c38  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000996  00000000  00000000  0002fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022aaf  00000000  00000000  00030616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000decf  00000000  00000000  000530c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cabb8  00000000  00000000  00060f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003360  00000000  00000000  0012bb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012eeac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003368 	.word	0x08003368

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003368 	.word	0x08003368

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_Z9uart_sendP20__UART_HandleTypeDefPh>:
		default:
			break;
	}
}*/

uint8_t uart_send(UART_HandleTypeDef *huart,uint8_t* data){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef transmit_status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	73fb      	strb	r3, [r7, #15]
	uint8_t data_length = RESET_VALUE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	73bb      	strb	r3, [r7, #14]
	char *temp_data = (char *)data;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	60bb      	str	r3, [r7, #8]

	/* Calculate length of message received */
	data_length = ((uint8_t)(strlen(temp_data)));
 80004ea:	68b8      	ldr	r0, [r7, #8]
 80004ec:	f7ff fe6c 	bl	80001c8 <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	73bb      	strb	r3, [r7, #14]

	chan1_comletely_send_data_flag = 0;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <_Z9uart_sendP20__UART_HandleTypeDefPh+0x4c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]

	transmit_status = UART_TRANSMIT_DATA(huart,data,data_length);
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	6839      	ldr	r1, [r7, #0]
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f001 ff9f 	bl	8002446 <HAL_UART_Transmit_IT>
 8000508:	4603      	mov	r3, r0
 800050a:	73fb      	strb	r3, [r7, #15]
	if (transmit_status != HAL_OK){
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <_Z9uart_sendP20__UART_HandleTypeDefPh+0x42>
		return TRANSMIT_ERROR;
 8000512:	2302      	movs	r3, #2
 8000514:	e000      	b.n	8000518 <_Z9uart_sendP20__UART_HandleTypeDefPh+0x44>
	}
	return TRANSMIT_SUCCESS;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	2000002e 	.word	0x2000002e

08000524 <HAL_UART_RxCpltCallback>:
	UART_Rx_CALLBACK(huart);
	UART_Tx_CALLBACK(huart);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a29      	ldr	r2, [pc, #164]	; (80005d8 <HAL_UART_RxCpltCallback+0xb4>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d123      	bne.n	800057e <HAL_UART_RxCpltCallback+0x5a>
		if(BUFFER_CHAN1_LENGTH == buffer_chan1_index)
 8000536:	4b29      	ldr	r3, [pc, #164]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b0a      	cmp	r3, #10
 800053c:	d102      	bne.n	8000544 <HAL_UART_RxCpltCallback+0x20>
		{
			buffer_chan1_index = RESET_VALUE;
 800053e:	4b27      	ldr	r3, [pc, #156]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		}
		switch(chan1_received_data){
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <HAL_UART_RxCpltCallback+0xbc>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b0d      	cmp	r3, #13
 800054a:	d106      	bne.n	800055a <HAL_UART_RxCpltCallback+0x36>
			case CARRIAGE_ASCII:
				buffer_chan1_index = RESET_VALUE;
 800054c:	4b23      	ldr	r3, [pc, #140]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
				data_chan1_received_flag = 1;
 8000552:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <HAL_UART_RxCpltCallback+0xc0>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
				break;
 8000558:	e00b      	b.n	8000572 <HAL_UART_RxCpltCallback+0x4e>
			default:
				uart_chan1_buffer[buffer_chan1_index++] = (uint8_t)chan2_received_data;
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	b2d1      	uxtb	r1, r2
 8000562:	4a1e      	ldr	r2, [pc, #120]	; (80005dc <HAL_UART_RxCpltCallback+0xb8>)
 8000564:	7011      	strb	r1, [r2, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <HAL_UART_RxCpltCallback+0xc4>)
 800056a:	7819      	ldrb	r1, [r3, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <HAL_UART_RxCpltCallback+0xc8>)
 800056e:	5499      	strb	r1, [r3, r2]
				break;
 8000570:	bf00      	nop
		}
		UART_RECEIVED_DATA(huart,&chan1_received_data);
 8000572:	2201      	movs	r2, #1
 8000574:	491a      	ldr	r1, [pc, #104]	; (80005e0 <HAL_UART_RxCpltCallback+0xbc>)
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f001 ffaa 	bl	80024d0 <HAL_UART_Receive_IT>
				uart_chan2_buffer[buffer_chan2_index++] = (uint8_t)chan2_received_data;
				break;
		}
		UART_RECEIVED_DATA(huart,&chan2_received_data);
	}
}
 800057c:	e027      	b.n	80005ce <HAL_UART_RxCpltCallback+0xaa>
	else if (huart->Instance == UART5){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <HAL_UART_RxCpltCallback+0xcc>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d122      	bne.n	80005ce <HAL_UART_RxCpltCallback+0xaa>
		if(BUFFER_CHAN2_LENGTH == buffer_chan2_index)
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <HAL_UART_RxCpltCallback+0xd0>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b0a      	cmp	r3, #10
 800058e:	d102      	bne.n	8000596 <HAL_UART_RxCpltCallback+0x72>
			buffer_chan2_index = RESET_VALUE;
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_UART_RxCpltCallback+0xd0>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
		switch(chan2_received_data){
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_UART_RxCpltCallback+0xc4>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b0d      	cmp	r3, #13
 800059c:	d106      	bne.n	80005ac <HAL_UART_RxCpltCallback+0x88>
				buffer_chan2_index = RESET_VALUE;
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <HAL_UART_RxCpltCallback+0xd0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
				data_chan2_received_flag = 1;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_UART_RxCpltCallback+0xd4>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
				break;
 80005aa:	e00b      	b.n	80005c4 <HAL_UART_RxCpltCallback+0xa0>
				uart_chan2_buffer[buffer_chan2_index++] = (uint8_t)chan2_received_data;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_UART_RxCpltCallback+0xd0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	b2d1      	uxtb	r1, r2
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <HAL_UART_RxCpltCallback+0xd0>)
 80005b6:	7011      	strb	r1, [r2, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <HAL_UART_RxCpltCallback+0xc4>)
 80005bc:	7819      	ldrb	r1, [r3, #0]
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <HAL_UART_RxCpltCallback+0xd8>)
 80005c0:	5499      	strb	r1, [r3, r2]
				break;
 80005c2:	bf00      	nop
		UART_RECEIVED_DATA(huart,&chan2_received_data);
 80005c4:	2201      	movs	r2, #1
 80005c6:	4908      	ldr	r1, [pc, #32]	; (80005e8 <HAL_UART_RxCpltCallback+0xc4>)
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f001 ff81 	bl	80024d0 <HAL_UART_Receive_IT>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40004c00 	.word	0x40004c00
 80005dc:	20000028 	.word	0x20000028
 80005e0:	2000002c 	.word	0x2000002c
 80005e4:	2000002a 	.word	0x2000002a
 80005e8:	2000002d 	.word	0x2000002d
 80005ec:	20000030 	.word	0x20000030
 80005f0:	40005000 	.word	0x40005000
 80005f4:	20000029 	.word	0x20000029
 80005f8:	2000002b 	.word	0x2000002b
 80005fc:	2000003c 	.word	0x2000003c

08000600 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a05      	ldr	r2, [pc, #20]	; (8000624 <HAL_UART_TxCpltCallback+0x24>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d104      	bne.n	800061c <HAL_UART_TxCpltCallback+0x1c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <HAL_UART_TxCpltCallback+0x28>)
 8000618:	f000 ff17 	bl	800144a <HAL_GPIO_TogglePin>
	}

}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40004c00 	.word	0x40004c00
 8000628:	40020c00 	.word	0x40020c00

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fb1b 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f831 	bl	800069c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f94f 	bl	80008dc <_ZL12MX_GPIO_Initv>
  MX_UART4_Init();
 800063e:	f000 f8f1 	bl	8000824 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8000642:	f000 f91d 	bl	8000880 <_ZL13MX_UART5_Initv>
  MX_TIM2_Init();
 8000646:	f000 f891 	bl	800076c <_ZL12MX_TIM2_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART_RECEIVED_DATA(&huart4,&chan1_received_data);
 800064a:	2201      	movs	r2, #1
 800064c:	490f      	ldr	r1, [pc, #60]	; (800068c <main+0x60>)
 800064e:	4810      	ldr	r0, [pc, #64]	; (8000690 <main+0x64>)
 8000650:	f001 ff3e 	bl	80024d0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000654:	480f      	ldr	r0, [pc, #60]	; (8000694 <main+0x68>)
 8000656:	f001 fbbb 	bl	8001dd0 <HAL_TIM_Base_Start_IT>
  uint8_t data[30] = "Hello/n";
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <main+0x6c>)
 800065c:	463b      	mov	r3, r7
 800065e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000662:	e883 0003 	stmia.w	r3, {r0, r1}
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	829a      	strh	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */
	uart_send(&huart4,data);
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <main+0x64>)
 800067e:	f7ff ff29 	bl	80004d4 <_Z9uart_sendP20__UART_HandleTypeDefPh>
	HAL_Delay(2000);
 8000682:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000686:	f000 fb63 	bl	8000d50 <HAL_Delay>
	uart_send(&huart4,data);
 800068a:	e7f5      	b.n	8000678 <main+0x4c>
 800068c:	2000002c 	.word	0x2000002c
 8000690:	20000090 	.word	0x20000090
 8000694:	20000048 	.word	0x20000048
 8000698:	08003380 	.word	0x08003380

0800069c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fe30 	bl	8003310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <_Z18SystemClock_Configv+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a26      	ldr	r2, [pc, #152]	; (8000764 <_Z18SystemClock_Configv+0xc8>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <_Z18SystemClock_Configv+0xc8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <_Z18SystemClock_Configv+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a20      	ldr	r2, [pc, #128]	; (8000768 <_Z18SystemClock_Configv+0xcc>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <_Z18SystemClock_Configv+0xcc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 feb7 	bl	8001480 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	bf14      	ite	ne
 8000718:	2301      	movne	r3, #1
 800071a:	2300      	moveq	r3, #0
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8000722:	f000 f92d 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f001 f915 	bl	8001970 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8000756:	f000 f913 	bl	8000980 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000788:	4b25      	ldr	r3, [pc, #148]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 8000792:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000796:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b0:	481b      	ldr	r0, [pc, #108]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 80007b2:	f001 fabd 	bl	8001d30 <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf14      	ite	ne
 80007bc:	2301      	movne	r3, #1
 80007be:	2300      	moveq	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80007c6:	f000 f8db 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	4812      	ldr	r0, [pc, #72]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 80007d8:	f001 fb6a 	bl	8001eb0 <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80007ec:	f000 f8c8 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	4808      	ldr	r0, [pc, #32]	; (8000820 <_ZL12MX_TIM2_Initv+0xb4>)
 80007fe:	f001 fd59 	bl	80022b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf14      	ite	ne
 8000808:	2301      	movne	r3, #1
 800080a:	2300      	moveq	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8000812:	f000 f8b5 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000048 	.word	0x20000048

08000824 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <_ZL13MX_UART4_Initv+0x58>)
 800082c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <_ZL13MX_UART4_Initv+0x54>)
 800085c:	f001 fda6 	bl	80023ac <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8000870:	f000 f886 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000090 	.word	0x20000090
 800087c:	40004c00 	.word	0x40004c00

08000880 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <_ZL13MX_UART5_Initv+0x58>)
 8000888:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <_ZL13MX_UART5_Initv+0x54>)
 80008b8:	f001 fd78 	bl	80023ac <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf14      	ite	ne
 80008c2:	2301      	movne	r3, #1
 80008c4:	2300      	moveq	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80008cc:	f000 f858 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000d4 	.word	0x200000d4
 80008d8:	40005000 	.word	0x40005000

080008dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <_ZL12MX_GPIO_Initv+0x9c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <_ZL12MX_GPIO_Initv+0xa0>)
 800094e:	f000 fd63 	bl	8001418 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : LED_Pin */
	  GPIO_InitStruct.Pin = LED_Pin;
 8000952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000956:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <_ZL12MX_GPIO_Initv+0xa0>)
 800096c:	f000 fbb8 	bl	80010e0 <HAL_GPIO_Init>
}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020c00 	.word	0x40020c00

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009ec:	d10d      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a49      	ldr	r2, [pc, #292]	; (8000b60 <HAL_UART_MspInit+0x144>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d134      	bne.n	8000aa8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a40      	ldr	r2, [pc, #256]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a76:	2303      	movs	r3, #3
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a86:	2308      	movs	r3, #8
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4835      	ldr	r0, [pc, #212]	; (8000b68 <HAL_UART_MspInit+0x14c>)
 8000a92:	f000 fb25 	bl	80010e0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2034      	movs	r0, #52	; 0x34
 8000a9c:	f000 fa57 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000aa0:	2034      	movs	r0, #52	; 0x34
 8000aa2:	f000 fa70 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000aa6:	e057      	b.n	8000b58 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==UART5)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <HAL_UART_MspInit+0x150>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d152      	bne.n	8000b58 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a2a      	ldr	r2, [pc, #168]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_UART_MspInit+0x148>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4813      	ldr	r0, [pc, #76]	; (8000b70 <HAL_UART_MspInit+0x154>)
 8000b24:	f000 fadc 	bl	80010e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <HAL_UART_MspInit+0x158>)
 8000b44:	f000 facc 	bl	80010e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2035      	movs	r0, #53	; 0x35
 8000b4e:	f000 f9fe 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000b52:	2035      	movs	r0, #53	; 0x35
 8000b54:	f000 fa17 	bl	8000f86 <HAL_NVIC_EnableIRQ>
}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40004c00 	.word	0x40004c00
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40005000 	.word	0x40005000
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8a4 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <UART4_IRQHandler+0x10>)
 8000bd2:	f001 fcad 	bl	8002530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000090 	.word	0x20000090

08000be0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <UART5_IRQHandler+0x10>)
 8000be6:	f001 fca3 	bl	8002530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000d4 	.word	0x200000d4

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c1e:	490e      	ldr	r1, [pc, #56]	; (8000c58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c34:	4c0b      	ldr	r4, [pc, #44]	; (8000c64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c42:	f7ff ffd7 	bl	8000bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f002 fb6b 	bl	8003320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fcef 	bl	800062c <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	080033c8 	.word	0x080033c8
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	2000011c 	.word	0x2000011c

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f94f 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fe74 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f967 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 f92f 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000118 	.word	0x20000118

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000118 	.word	0x20000118

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff29 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff3e 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff8e 	bl	8000e8c <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff31 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff feb6 	bl	8000d38 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d008      	beq.n	8000fec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e052      	b.n	8001092 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0216 	bic.w	r2, r2, #22
 8000ffa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800100a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <HAL_DMA_Abort+0x62>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001018:	2b00      	cmp	r3, #0
 800101a:	d007      	beq.n	800102c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0208 	bic.w	r2, r2, #8
 800102a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103c:	e013      	b.n	8001066 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800103e:	f7ff fe7b 	bl	8000d38 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b05      	cmp	r3, #5
 800104a:	d90c      	bls.n	8001066 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2220      	movs	r2, #32
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2203      	movs	r2, #3
 8001056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e015      	b.n	8001092 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e4      	bne.n	800103e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001078:	223f      	movs	r2, #63	; 0x3f
 800107a:	409a      	lsls	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d004      	beq.n	80010b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e00c      	b.n	80010d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2205      	movs	r2, #5
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e16b      	b.n	80013d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 815a 	bne.w	80013ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d005      	beq.n	8001132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	2b02      	cmp	r3, #2
 8001130:	d130      	bne.n	8001194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 0201 	and.w	r2, r3, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b03      	cmp	r3, #3
 800119e:	d017      	beq.n	80011d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d123      	bne.n	8001224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	69b9      	ldr	r1, [r7, #24]
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80b4 	beq.w	80013ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b60      	ldr	r3, [pc, #384]	; (80013ec <HAL_GPIO_Init+0x30c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a5f      	ldr	r2, [pc, #380]	; (80013ec <HAL_GPIO_Init+0x30c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_GPIO_Init+0x30c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001282:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <HAL_GPIO_Init+0x310>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_GPIO_Init+0x314>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d02b      	beq.n	8001306 <HAL_GPIO_Init+0x226>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a51      	ldr	r2, [pc, #324]	; (80013f8 <HAL_GPIO_Init+0x318>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x222>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a50      	ldr	r2, [pc, #320]	; (80013fc <HAL_GPIO_Init+0x31c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x21e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	; (8001400 <HAL_GPIO_Init+0x320>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x21a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_GPIO_Init+0x324>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x216>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_GPIO_Init+0x328>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x212>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x32c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x20e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <HAL_GPIO_Init+0x330>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x20a>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e00e      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012ea:	2308      	movs	r3, #8
 80012ec:	e00c      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e00a      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012f2:	2305      	movs	r3, #5
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x228>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x228>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x310>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134a:	4a32      	ldr	r2, [pc, #200]	; (8001414 <HAL_GPIO_Init+0x334>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001374:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_GPIO_Init+0x334>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c8:	4a12      	ldr	r2, [pc, #72]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f ae90 	bls.w	80010fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40021400 	.word	0x40021400
 800140c:	40021800 	.word	0x40021800
 8001410:	40021c00 	.word	0x40021c00
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145c:	887a      	ldrh	r2, [r7, #2]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	041a      	lsls	r2, r3, #16
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43d9      	mvns	r1, r3
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	400b      	ands	r3, r1
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e267      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d075      	beq.n	800158a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d00c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014aa:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d112      	bne.n	80014dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b6:	4b82      	ldr	r3, [pc, #520]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014c2:	d10b      	bne.n	80014dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	4b7e      	ldr	r3, [pc, #504]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d05b      	beq.n	8001588 <HAL_RCC_OscConfig+0x108>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d157      	bne.n	8001588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e242      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e4:	d106      	bne.n	80014f4 <HAL_RCC_OscConfig+0x74>
 80014e6:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a75      	ldr	r2, [pc, #468]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e01d      	b.n	8001530 <HAL_RCC_OscConfig+0xb0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x98>
 80014fe:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6f      	ldr	r2, [pc, #444]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b6d      	ldr	r3, [pc, #436]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6c      	ldr	r2, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0xb0>
 8001518:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a68      	ldr	r2, [pc, #416]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800151e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800152a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fbfe 	bl	8000d38 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fbfa 	bl	8000d38 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e207      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0xc0>
 800155e:	e014      	b.n	800158a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fbea 	bl	8000d38 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fbe6 	bl	8000d38 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1f3      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0xe8>
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d063      	beq.n	800165e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001596:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d11c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d116      	bne.n	80015e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x152>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e1c7      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4937      	ldr	r1, [pc, #220]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e6:	e03a      	b.n	800165e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f0:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x244>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb9f 	bl	8000d38 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fb9b 	bl	8000d38 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e1a8      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4925      	ldr	r1, [pc, #148]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCC_OscConfig+0x244>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff fb7e 	bl	8000d38 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff fb7a 	bl	8000d38 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e187      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d036      	beq.n	80016d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d016      	beq.n	80016a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_RCC_OscConfig+0x248>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fb5e 	bl	8000d38 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fb5a 	bl	8000d38 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e167      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x240>)
 8001694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x200>
 800169e:	e01b      	b.n	80016d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_RCC_OscConfig+0x248>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fb47 	bl	8000d38 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	e00e      	b.n	80016cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff fb43 	bl	8000d38 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d907      	bls.n	80016cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e150      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470000 	.word	0x42470000
 80016c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1ea      	bne.n	80016ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8097 	beq.w	8001814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ea:	4b81      	ldr	r3, [pc, #516]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10f      	bne.n	8001716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b7d      	ldr	r3, [pc, #500]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a7c      	ldr	r2, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	4b77      	ldr	r3, [pc, #476]	; (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d118      	bne.n	8001754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001722:	4b74      	ldr	r3, [pc, #464]	; (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a73      	ldr	r2, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x474>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172e:	f7ff fb03 	bl	8000d38 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001736:	f7ff faff 	bl	8000d38 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e10c      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001748:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_OscConfig+0x474>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x2ea>
 800175c:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	4a63      	ldr	r2, [pc, #396]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	; 0x70
 8001768:	e01c      	b.n	80017a4 <HAL_RCC_OscConfig+0x324>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x30c>
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a5e      	ldr	r2, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a5b      	ldr	r2, [pc, #364]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0x324>
 800178c:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a57      	ldr	r2, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800179e:	f023 0304 	bic.w	r3, r3, #4
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d015      	beq.n	80017d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fac4 	bl	8000d38 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff fac0 	bl	8000d38 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0cb      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0ee      	beq.n	80017b4 <HAL_RCC_OscConfig+0x334>
 80017d6:	e014      	b.n	8001802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff faae 	bl	8000d38 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff faaa 	bl	8000d38 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0b5      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1ee      	bne.n	80017e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 800180e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a1 	beq.w	8001960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b08      	cmp	r3, #8
 8001828:	d05c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d141      	bne.n	80018b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_RCC_OscConfig+0x478>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fa7e 	bl	8000d38 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fa7a 	bl	8000d38 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e087      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	019b      	lsls	r3, r3, #6
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	085b      	lsrs	r3, r3, #1
 8001876:	3b01      	subs	r3, #1
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	491b      	ldr	r1, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x478>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fa53 	bl	8000d38 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff fa4f 	bl	8000d38 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e05c      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x416>
 80018b4:	e054      	b.n	8001960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x478>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fa3c 	bl	8000d38 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fa38 	bl	8000d38 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e045      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_OscConfig+0x470>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x444>
 80018e2:	e03d      	b.n	8001960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e038      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_RCC_OscConfig+0x4ec>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d028      	beq.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d121      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d11a      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001934:	4293      	cmp	r3, r2
 8001936:	d111      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0cc      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d90c      	bls.n	80019ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0b8      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	494d      	ldr	r1, [pc, #308]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d044      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d119      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e07f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d003      	beq.n	8001a2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e067      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4934      	ldr	r1, [pc, #208]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7ff f96a 	bl	8000d38 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff f966 	bl	8000d38 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e04f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d20c      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e032      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4916      	ldr	r1, [pc, #88]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	490e      	ldr	r1, [pc, #56]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af6:	f000 f821 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490a      	ldr	r1, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f8ca 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	080033a0 	.word	0x080033a0
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b40:	b090      	sub	sp, #64	; 0x40
 8001b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d00d      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x40>
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	f200 80a1 	bhi.w	8001ca8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x34>
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b6e:	e09b      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b74:	e09b      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b76:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b7a:	e098      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b86:	4b4d      	ldr	r3, [pc, #308]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d028      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4b4a      	ldr	r3, [pc, #296]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	2200      	movs	r2, #0
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	627a      	str	r2, [r7, #36]	; 0x24
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4b47      	ldr	r3, [pc, #284]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ba8:	fb03 f201 	mul.w	r2, r3, r1
 8001bac:	2300      	movs	r3, #0
 8001bae:	fb00 f303 	mul.w	r3, r0, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bb6:	fba0 1202 	umull	r1, r2, r0, r2
 8001bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc2:	4413      	add	r3, r2
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	61fa      	str	r2, [r7, #28]
 8001bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bd6:	f7fe faff 	bl	80001d8 <__aeabi_uldivmod>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4613      	mov	r3, r2
 8001be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be2:	e053      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	2200      	movs	r2, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	617a      	str	r2, [r7, #20]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bf6:	f04f 0b00 	mov.w	fp, #0
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	465b      	mov	r3, fp
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	0159      	lsls	r1, r3, #5
 8001c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0c:	0150      	lsls	r0, r2, #5
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	ebb2 080a 	subs.w	r8, r2, sl
 8001c16:	eb63 090b 	sbc.w	r9, r3, fp
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c2e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c32:	eb63 0509 	sbc.w	r5, r3, r9
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	00eb      	lsls	r3, r5, #3
 8001c40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c44:	00e2      	lsls	r2, r4, #3
 8001c46:	4614      	mov	r4, r2
 8001c48:	461d      	mov	r5, r3
 8001c4a:	eb14 030a 	adds.w	r3, r4, sl
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	eb45 030b 	adc.w	r3, r5, fp
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c62:	4629      	mov	r1, r5
 8001c64:	028b      	lsls	r3, r1, #10
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	028a      	lsls	r2, r1, #10
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c76:	2200      	movs	r2, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	60fa      	str	r2, [r7, #12]
 8001c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c80:	f7fe faaa 	bl	80001d8 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	3301      	adds	r3, #1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ca6:	e002      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3740      	adds	r7, #64	; 0x40
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	00f42400 	.word	0x00f42400
 8001cc4:	017d7840 	.word	0x017d7840

08001cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce4:	f7ff fff0 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	0a9b      	lsrs	r3, r3, #10
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4903      	ldr	r1, [pc, #12]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	080033b0 	.word	0x080033b0

08001d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d0c:	f7ff ffdc 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0b5b      	lsrs	r3, r3, #13
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	080033b0 	.word	0x080033b0

08001d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e041      	b.n	8001dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fe40 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 f966 	bl	8002040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d001      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e04e      	b.n	8001e86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d022      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e12:	d01d      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d018      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00e      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d004      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a18      	ldr	r2, [pc, #96]	; (8001eac <HAL_TIM_Base_Start_IT+0xdc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d111      	bne.n	8001e74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d010      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e72:	e007      	b.n	8001e84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40000c00 	.word	0x40000c00
 8001ea4:	40010400 	.word	0x40010400
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40001800 	.word	0x40001800

08001eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_TIM_ConfigClockSource+0x1c>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e0b4      	b.n	8002036 <HAL_TIM_ConfigClockSource+0x186>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ef2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f04:	d03e      	beq.n	8001f84 <HAL_TIM_ConfigClockSource+0xd4>
 8001f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f0a:	f200 8087 	bhi.w	800201c <HAL_TIM_ConfigClockSource+0x16c>
 8001f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f12:	f000 8086 	beq.w	8002022 <HAL_TIM_ConfigClockSource+0x172>
 8001f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1a:	d87f      	bhi.n	800201c <HAL_TIM_ConfigClockSource+0x16c>
 8001f1c:	2b70      	cmp	r3, #112	; 0x70
 8001f1e:	d01a      	beq.n	8001f56 <HAL_TIM_ConfigClockSource+0xa6>
 8001f20:	2b70      	cmp	r3, #112	; 0x70
 8001f22:	d87b      	bhi.n	800201c <HAL_TIM_ConfigClockSource+0x16c>
 8001f24:	2b60      	cmp	r3, #96	; 0x60
 8001f26:	d050      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0x11a>
 8001f28:	2b60      	cmp	r3, #96	; 0x60
 8001f2a:	d877      	bhi.n	800201c <HAL_TIM_ConfigClockSource+0x16c>
 8001f2c:	2b50      	cmp	r3, #80	; 0x50
 8001f2e:	d03c      	beq.n	8001faa <HAL_TIM_ConfigClockSource+0xfa>
 8001f30:	2b50      	cmp	r3, #80	; 0x50
 8001f32:	d873      	bhi.n	800201c <HAL_TIM_ConfigClockSource+0x16c>
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d058      	beq.n	8001fea <HAL_TIM_ConfigClockSource+0x13a>
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d86f      	bhi.n	800201c <HAL_TIM_ConfigClockSource+0x16c>
 8001f3c:	2b30      	cmp	r3, #48	; 0x30
 8001f3e:	d064      	beq.n	800200a <HAL_TIM_ConfigClockSource+0x15a>
 8001f40:	2b30      	cmp	r3, #48	; 0x30
 8001f42:	d86b      	bhi.n	800201c <HAL_TIM_ConfigClockSource+0x16c>
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d060      	beq.n	800200a <HAL_TIM_ConfigClockSource+0x15a>
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d867      	bhi.n	800201c <HAL_TIM_ConfigClockSource+0x16c>
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05c      	beq.n	800200a <HAL_TIM_ConfigClockSource+0x15a>
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d05a      	beq.n	800200a <HAL_TIM_ConfigClockSource+0x15a>
 8001f54:	e062      	b.n	800201c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6899      	ldr	r1, [r3, #8]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f000 f985 	bl	8002274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	609a      	str	r2, [r3, #8]
      break;
 8001f82:	e04f      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6899      	ldr	r1, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f000 f96e 	bl	8002274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fa6:	609a      	str	r2, [r3, #8]
      break;
 8001fa8:	e03c      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6859      	ldr	r1, [r3, #4]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f000 f8e2 	bl	8002180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2150      	movs	r1, #80	; 0x50
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f93b 	bl	800223e <TIM_ITRx_SetConfig>
      break;
 8001fc8:	e02c      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f000 f901 	bl	80021de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2160      	movs	r1, #96	; 0x60
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f92b 	bl	800223e <TIM_ITRx_SetConfig>
      break;
 8001fe8:	e01c      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f000 f8c2 	bl	8002180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2140      	movs	r1, #64	; 0x40
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f91b 	bl	800223e <TIM_ITRx_SetConfig>
      break;
 8002008:	e00c      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4619      	mov	r1, r3
 8002014:	4610      	mov	r0, r2
 8002016:	f000 f912 	bl	800223e <TIM_ITRx_SetConfig>
      break;
 800201a:	e003      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
      break;
 8002020:	e000      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a40      	ldr	r2, [pc, #256]	; (8002154 <TIM_Base_SetConfig+0x114>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205e:	d00f      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <TIM_Base_SetConfig+0x118>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00b      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3c      	ldr	r2, [pc, #240]	; (800215c <TIM_Base_SetConfig+0x11c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <TIM_Base_SetConfig+0x120>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <TIM_Base_SetConfig+0x124>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d108      	bne.n	8002092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <TIM_Base_SetConfig+0x114>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a0:	d027      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <TIM_Base_SetConfig+0x118>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d023      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <TIM_Base_SetConfig+0x11c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <TIM_Base_SetConfig+0x120>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <TIM_Base_SetConfig+0x124>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d017      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a28      	ldr	r2, [pc, #160]	; (8002168 <TIM_Base_SetConfig+0x128>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <TIM_Base_SetConfig+0x12c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00f      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <TIM_Base_SetConfig+0x130>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <TIM_Base_SetConfig+0x134>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <TIM_Base_SetConfig+0x138>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <TIM_Base_SetConfig+0x13c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d108      	bne.n	8002104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <TIM_Base_SetConfig+0x114>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d003      	beq.n	8002138 <TIM_Base_SetConfig+0xf8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <TIM_Base_SetConfig+0x124>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d103      	bne.n	8002140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	615a      	str	r2, [r3, #20]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	40000400 	.word	0x40000400
 800215c:	40000800 	.word	0x40000800
 8002160:	40000c00 	.word	0x40000c00
 8002164:	40010400 	.word	0x40010400
 8002168:	40014000 	.word	0x40014000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800
 8002174:	40001800 	.word	0x40001800
 8002178:	40001c00 	.word	0x40001c00
 800217c:	40002000 	.word	0x40002000

08002180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f023 0201 	bic.w	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f023 030a 	bic.w	r3, r3, #10
 80021bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	621a      	str	r2, [r3, #32]
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021de:	b480      	push	{r7}
 80021e0:	b087      	sub	sp, #28
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	f023 0210 	bic.w	r2, r3, #16
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	031b      	lsls	r3, r3, #12
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800221a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	621a      	str	r2, [r3, #32]
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	f043 0307 	orr.w	r3, r3, #7
 8002260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800228e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	021a      	lsls	r2, r3, #8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	431a      	orrs	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	609a      	str	r2, [r3, #8]
}
 80022a8:	bf00      	nop
 80022aa:	371c      	adds	r7, #28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e05a      	b.n	8002382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a21      	ldr	r2, [pc, #132]	; (8002390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d022      	beq.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d01d      	beq.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d018      	beq.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00e      	beq.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10c      	bne.n	8002370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800235c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4313      	orrs	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40010400 	.word	0x40010400
 80023a4:	40014000 	.word	0x40014000
 80023a8:	40001800 	.word	0x40001800

080023ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e03f      	b.n	800243e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fb22 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	; 0x24
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fd19 	bl	8002e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	4613      	mov	r3, r2
 8002452:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b20      	cmp	r3, #32
 800245e:	d130      	bne.n	80024c2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_UART_Transmit_IT+0x26>
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e029      	b.n	80024c4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_UART_Transmit_IT+0x38>
 800247a:	2302      	movs	r3, #2
 800247c:	e022      	b.n	80024c4 <HAL_UART_Transmit_IT+0x7e>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2221      	movs	r2, #33	; 0x21
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
  }
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d11d      	bne.n	8002526 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_UART_Receive_IT+0x26>
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e016      	b.n	8002528 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_UART_Receive_IT+0x38>
 8002504:	2302      	movs	r3, #2
 8002506:	e00f      	b.n	8002528 <HAL_UART_Receive_IT+0x58>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	461a      	mov	r2, r3
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 faab 	bl	8002a78 <UART_Start_Receive_IT>
 8002522:	4603      	mov	r3, r0
 8002524:	e000      	b.n	8002528 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b0ba      	sub	sp, #232	; 0xe8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800256e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_UART_IRQHandler+0x66>
 8002582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fb8f 	bl	8002cb2 <UART_Receive_IT>
      return;
 8002594:	e256      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80de 	beq.w	800275c <HAL_UART_IRQHandler+0x22c>
 80025a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80d1 	beq.w	800275c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_UART_IRQHandler+0xae>
 80025c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_UART_IRQHandler+0xd2>
 80025ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_UART_IRQHandler+0xf6>
 800260e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0204 	orr.w	r2, r3, #4
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <HAL_UART_IRQHandler+0x126>
 8002632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800263e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0208 	orr.w	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 81ed 	beq.w	8002a3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_UART_IRQHandler+0x14e>
 800266c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fb1a 	bl	8002cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_UART_IRQHandler+0x17a>
 80026a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d04f      	beq.n	800274a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fa22 	bl	8002af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d141      	bne.n	8002742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3314      	adds	r3, #20
 80026c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3314      	adds	r3, #20
 80026e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1d9      	bne.n	80026be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	2b00      	cmp	r3, #0
 8002710:	d013      	beq.n	800273a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	4a7d      	ldr	r2, [pc, #500]	; (800290c <HAL_UART_IRQHandler+0x3dc>)
 8002718:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fcbb 	bl	800109a <HAL_DMA_Abort_IT>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002734:	4610      	mov	r0, r2
 8002736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	e00e      	b.n	8002758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f986 	bl	8002a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	e00a      	b.n	8002758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f982 	bl	8002a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002748:	e006      	b.n	8002758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f97e 	bl	8002a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002756:	e170      	b.n	8002a3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002758:	bf00      	nop
    return;
 800275a:	e16e      	b.n	8002a3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	2b01      	cmp	r3, #1
 8002762:	f040 814a 	bne.w	80029fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8143 	beq.w	80029fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 813c 	beq.w	80029fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	f040 80b4 	bne.w	8002910 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8140 	beq.w	8002a3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027c6:	429a      	cmp	r2, r3
 80027c8:	f080 8139 	bcs.w	8002a3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027de:	f000 8088 	beq.w	80028f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f0:	e853 3f00 	ldrex	r3, [r3]
 80027f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800280e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800281a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1d9      	bne.n	80027e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3314      	adds	r3, #20
 8002834:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002838:	e853 3f00 	ldrex	r3, [r3]
 800283c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800283e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3314      	adds	r3, #20
 800284e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002852:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002856:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800285a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e1      	bne.n	800282e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3314      	adds	r3, #20
 8002870:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800287a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3314      	adds	r3, #20
 800288a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800288e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002890:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002894:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800289c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e3      	bne.n	800286a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ba:	e853 3f00 	ldrex	r3, [r3]
 80028be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c2:	f023 0310 	bic.w	r3, r3, #16
 80028c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80028d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028dc:	e841 2300 	strex	r3, r2, [r1]
 80028e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e3      	bne.n	80028b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fb64 	bl	8000fba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8ac 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002908:	e099      	b.n	8002a3e <HAL_UART_IRQHandler+0x50e>
 800290a:	bf00      	nop
 800290c:	08002bbb 	.word	0x08002bbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002918:	b29b      	uxth	r3, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 808b 	beq.w	8002a42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800292c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8086 	beq.w	8002a42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800294c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800295a:	647a      	str	r2, [r7, #68]	; 0x44
 800295c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e3      	bne.n	8002936 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	623b      	str	r3, [r7, #32]
   return(result);
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3314      	adds	r3, #20
 800298e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002992:	633a      	str	r2, [r7, #48]	; 0x30
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e3      	bne.n	800296e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0310 	bic.w	r3, r3, #16
 80029ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029d8:	61fa      	str	r2, [r7, #28]
 80029da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	69b9      	ldr	r1, [r7, #24]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	617b      	str	r3, [r7, #20]
   return(result);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e3      	bne.n	80029b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f834 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029f8:	e023      	b.n	8002a42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_UART_IRQHandler+0x4ea>
 8002a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8e5 	bl	8002be2 <UART_Transmit_IT>
    return;
 8002a18:	e014      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00e      	beq.n	8002a44 <HAL_UART_IRQHandler+0x514>
 8002a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f925 	bl	8002c82 <UART_EndTransmit_IT>
    return;
 8002a38:	e004      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
    return;
 8002a3a:	bf00      	nop
 8002a3c:	e002      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
      return;
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <HAL_UART_IRQHandler+0x514>
      return;
 8002a42:	bf00      	nop
  }
}
 8002a44:	37e8      	adds	r7, #232	; 0xe8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop

08002a4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2222      	movs	r2, #34	; 0x22
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0220 	orr.w	r2, r2, #32
 8002ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b095      	sub	sp, #84	; 0x54
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b1c:	643a      	str	r2, [r7, #64]	; 0x40
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b24:	e841 2300 	strex	r3, r2, [r1]
 8002b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e5      	bne.n	8002afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3314      	adds	r3, #20
 8002b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3314      	adds	r3, #20
 8002b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e5      	bne.n	8002b30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d119      	bne.n	8002ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	647b      	str	r3, [r7, #68]	; 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b8c:	61ba      	str	r2, [r7, #24]
 8002b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	e841 2300 	strex	r3, r2, [r1]
 8002b98:	613b      	str	r3, [r7, #16]
   return(result);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e5      	bne.n	8002b6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bae:	bf00      	nop
 8002bb0:	3754      	adds	r7, #84	; 0x54
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff ff39 	bl	8002a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b21      	cmp	r3, #33	; 0x21
 8002bf4:	d13e      	bne.n	8002c74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d114      	bne.n	8002c2a <UART_Transmit_IT+0x48>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d110      	bne.n	8002c2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	1c9a      	adds	r2, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	621a      	str	r2, [r3, #32]
 8002c28:	e008      	b.n	8002c3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	1c59      	adds	r1, r3, #1
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6211      	str	r1, [r2, #32]
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fcac 	bl	8000600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b08c      	sub	sp, #48	; 0x30
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b22      	cmp	r3, #34	; 0x22
 8002cc4:	f040 80ab 	bne.w	8002e1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d117      	bne.n	8002d02 <UART_Receive_IT+0x50>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d113      	bne.n	8002d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	1c9a      	adds	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8002d00:	e026      	b.n	8002d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d14:	d007      	beq.n	8002d26 <UART_Receive_IT+0x74>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <UART_Receive_IT+0x82>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e008      	b.n	8002d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d15a      	bne.n	8002e1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0220 	bic.w	r2, r2, #32
 8002d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d135      	bne.n	8002e10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f023 0310 	bic.w	r3, r3, #16
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	623a      	str	r2, [r7, #32]
 8002dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	69f9      	ldr	r1, [r7, #28]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d10a      	bne.n	8002e02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fe29 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
 8002e0e:	e002      	b.n	8002e16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7fd fb87 	bl	8000524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e002      	b.n	8002e20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b0c0      	sub	sp, #256	; 0x100
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	ea40 0301 	orr.w	r3, r0, r1
 8002e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e80:	f021 010c 	bic.w	r1, r1, #12
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	6999      	ldr	r1, [r3, #24]
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	ea40 0301 	orr.w	r3, r0, r1
 8002eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <UART_SetConfig+0x2cc>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d005      	beq.n	8002ec8 <UART_SetConfig+0xa0>
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <UART_SetConfig+0x2d0>)
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d104      	bne.n	8002ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec8:	f7fe ff1e 	bl	8001d08 <HAL_RCC_GetPCLK2Freq>
 8002ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ed0:	e003      	b.n	8002eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ed2:	f7fe ff05 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8002ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee4:	f040 810c 	bne.w	8003100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	1891      	adds	r1, r2, r2
 8002f00:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f02:	415b      	adcs	r3, r3
 8002f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	eb12 0801 	adds.w	r8, r2, r1
 8002f10:	4629      	mov	r1, r5
 8002f12:	eb43 0901 	adc.w	r9, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb18 0303 	adds.w	r3, r8, r3
 8002f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f38:	462b      	mov	r3, r5
 8002f3a:	eb49 0303 	adc.w	r3, r9, r3
 8002f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f56:	460b      	mov	r3, r1
 8002f58:	18db      	adds	r3, r3, r3
 8002f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	eb42 0303 	adc.w	r3, r2, r3
 8002f62:	657b      	str	r3, [r7, #84]	; 0x54
 8002f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f6c:	f7fd f934 	bl	80001d8 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <UART_SetConfig+0x2d4>)
 8002f76:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	011c      	lsls	r4, r3, #4
 8002f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	1891      	adds	r1, r2, r2
 8002f96:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f98:	415b      	adcs	r3, r3
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fc0:	4692      	mov	sl, r2
 8002fc2:	469b      	mov	fp, r3
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fec:	460b      	mov	r3, r1
 8002fee:	18db      	adds	r3, r3, r3
 8002ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003002:	f7fd f8e9 	bl	80001d8 <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4611      	mov	r1, r2
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <UART_SetConfig+0x2d4>)
 800300e:	fba3 2301 	umull	r2, r3, r3, r1
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2264      	movs	r2, #100	; 0x64
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	1acb      	subs	r3, r1, r3
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <UART_SetConfig+0x2d4>)
 8003024:	fba3 2302 	umull	r2, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003030:	441c      	add	r4, r3
 8003032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800303c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	1891      	adds	r1, r2, r2
 800304a:	63b9      	str	r1, [r7, #56]	; 0x38
 800304c:	415b      	adcs	r3, r3
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003054:	4641      	mov	r1, r8
 8003056:	1851      	adds	r1, r2, r1
 8003058:	6339      	str	r1, [r7, #48]	; 0x30
 800305a:	4649      	mov	r1, r9
 800305c:	414b      	adcs	r3, r1
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800306c:	4659      	mov	r1, fp
 800306e:	00cb      	lsls	r3, r1, #3
 8003070:	4651      	mov	r1, sl
 8003072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003076:	4651      	mov	r1, sl
 8003078:	00ca      	lsls	r2, r1, #3
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	4603      	mov	r3, r0
 8003080:	4642      	mov	r2, r8
 8003082:	189b      	adds	r3, r3, r2
 8003084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003088:	464b      	mov	r3, r9
 800308a:	460a      	mov	r2, r1
 800308c:	eb42 0303 	adc.w	r3, r2, r3
 8003090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030be:	f7fd f88b 	bl	80001d8 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <UART_SetConfig+0x2d4>)
 80030c8:	fba3 1302 	umull	r1, r3, r3, r2
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	2164      	movs	r1, #100	; 0x64
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	3332      	adds	r3, #50	; 0x32
 80030da:	4a08      	ldr	r2, [pc, #32]	; (80030fc <UART_SetConfig+0x2d4>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	f003 0207 	and.w	r2, r3, #7
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4422      	add	r2, r4
 80030ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030f0:	e106      	b.n	8003300 <UART_SetConfig+0x4d8>
 80030f2:	bf00      	nop
 80030f4:	40011000 	.word	0x40011000
 80030f8:	40011400 	.word	0x40011400
 80030fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800310a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800310e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003112:	4642      	mov	r2, r8
 8003114:	464b      	mov	r3, r9
 8003116:	1891      	adds	r1, r2, r2
 8003118:	6239      	str	r1, [r7, #32]
 800311a:	415b      	adcs	r3, r3
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003122:	4641      	mov	r1, r8
 8003124:	1854      	adds	r4, r2, r1
 8003126:	4649      	mov	r1, r9
 8003128:	eb43 0501 	adc.w	r5, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	00eb      	lsls	r3, r5, #3
 8003136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	4643      	mov	r3, r8
 8003142:	18e3      	adds	r3, r4, r3
 8003144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003148:	464b      	mov	r3, r9
 800314a:	eb45 0303 	adc.w	r3, r5, r3
 800314e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800315e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800316e:	4629      	mov	r1, r5
 8003170:	008b      	lsls	r3, r1, #2
 8003172:	4621      	mov	r1, r4
 8003174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003178:	4621      	mov	r1, r4
 800317a:	008a      	lsls	r2, r1, #2
 800317c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003180:	f7fd f82a 	bl	80001d8 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b60      	ldr	r3, [pc, #384]	; (800330c <UART_SetConfig+0x4e4>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800319c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	61b9      	str	r1, [r7, #24]
 80031ac:	415b      	adcs	r3, r3
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b4:	4641      	mov	r1, r8
 80031b6:	1851      	adds	r1, r2, r1
 80031b8:	6139      	str	r1, [r7, #16]
 80031ba:	4649      	mov	r1, r9
 80031bc:	414b      	adcs	r3, r1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031cc:	4659      	mov	r1, fp
 80031ce:	00cb      	lsls	r3, r1, #3
 80031d0:	4651      	mov	r1, sl
 80031d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d6:	4651      	mov	r1, sl
 80031d8:	00ca      	lsls	r2, r1, #3
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	4642      	mov	r2, r8
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e8:	464b      	mov	r3, r9
 80031ea:	460a      	mov	r2, r1
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80031fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800320c:	4649      	mov	r1, r9
 800320e:	008b      	lsls	r3, r1, #2
 8003210:	4641      	mov	r1, r8
 8003212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003216:	4641      	mov	r1, r8
 8003218:	008a      	lsls	r2, r1, #2
 800321a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800321e:	f7fc ffdb 	bl	80001d8 <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4611      	mov	r1, r2
 8003228:	4b38      	ldr	r3, [pc, #224]	; (800330c <UART_SetConfig+0x4e4>)
 800322a:	fba3 2301 	umull	r2, r3, r3, r1
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2264      	movs	r2, #100	; 0x64
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	1acb      	subs	r3, r1, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	; 0x32
 800323c:	4a33      	ldr	r2, [pc, #204]	; (800330c <UART_SetConfig+0x4e4>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003248:	441c      	add	r4, r3
 800324a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324e:	2200      	movs	r2, #0
 8003250:	673b      	str	r3, [r7, #112]	; 0x70
 8003252:	677a      	str	r2, [r7, #116]	; 0x74
 8003254:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	415b      	adcs	r3, r3
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	66bb      	str	r3, [r7, #104]	; 0x68
 800329a:	464b      	mov	r3, r9
 800329c:	460a      	mov	r2, r1
 800329e:	eb42 0303 	adc.w	r3, r2, r3
 80032a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	663b      	str	r3, [r7, #96]	; 0x60
 80032ae:	667a      	str	r2, [r7, #100]	; 0x64
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032bc:	4649      	mov	r1, r9
 80032be:	008b      	lsls	r3, r1, #2
 80032c0:	4641      	mov	r1, r8
 80032c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c6:	4641      	mov	r1, r8
 80032c8:	008a      	lsls	r2, r1, #2
 80032ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032ce:	f7fc ff83 	bl	80001d8 <__aeabi_uldivmod>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <UART_SetConfig+0x4e4>)
 80032d8:	fba3 1302 	umull	r1, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	2164      	movs	r1, #100	; 0x64
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	3332      	adds	r3, #50	; 0x32
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <UART_SetConfig+0x4e4>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	f003 020f 	and.w	r2, r3, #15
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4422      	add	r2, r4
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330c:	51eb851f 	.word	0x51eb851f

08003310 <memset>:
 8003310:	4402      	add	r2, r0
 8003312:	4603      	mov	r3, r0
 8003314:	4293      	cmp	r3, r2
 8003316:	d100      	bne.n	800331a <memset+0xa>
 8003318:	4770      	bx	lr
 800331a:	f803 1b01 	strb.w	r1, [r3], #1
 800331e:	e7f9      	b.n	8003314 <memset+0x4>

08003320 <__libc_init_array>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	4d0d      	ldr	r5, [pc, #52]	; (8003358 <__libc_init_array+0x38>)
 8003324:	4c0d      	ldr	r4, [pc, #52]	; (800335c <__libc_init_array+0x3c>)
 8003326:	1b64      	subs	r4, r4, r5
 8003328:	10a4      	asrs	r4, r4, #2
 800332a:	2600      	movs	r6, #0
 800332c:	42a6      	cmp	r6, r4
 800332e:	d109      	bne.n	8003344 <__libc_init_array+0x24>
 8003330:	4d0b      	ldr	r5, [pc, #44]	; (8003360 <__libc_init_array+0x40>)
 8003332:	4c0c      	ldr	r4, [pc, #48]	; (8003364 <__libc_init_array+0x44>)
 8003334:	f000 f818 	bl	8003368 <_init>
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	2600      	movs	r6, #0
 800333e:	42a6      	cmp	r6, r4
 8003340:	d105      	bne.n	800334e <__libc_init_array+0x2e>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	f855 3b04 	ldr.w	r3, [r5], #4
 8003348:	4798      	blx	r3
 800334a:	3601      	adds	r6, #1
 800334c:	e7ee      	b.n	800332c <__libc_init_array+0xc>
 800334e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003352:	4798      	blx	r3
 8003354:	3601      	adds	r6, #1
 8003356:	e7f2      	b.n	800333e <__libc_init_array+0x1e>
 8003358:	080033c0 	.word	0x080033c0
 800335c:	080033c0 	.word	0x080033c0
 8003360:	080033c0 	.word	0x080033c0
 8003364:	080033c4 	.word	0x080033c4

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr
